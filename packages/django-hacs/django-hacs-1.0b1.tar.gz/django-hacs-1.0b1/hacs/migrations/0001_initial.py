# -*- coding: utf-8 -*-
# Generated by Django 1.9.3 on 2016-07-13 19:03
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import hacs.fields
import hacs.models
import hacs.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentTypeRoutingRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('allowed_method', hacs.fields.SequenceField(blank=True, null=True, verbose_name='Allowed Method')),
                ('blacklisted_uri', models.CharField(blank=True, help_text='regex formatted uri those will be treated as blacklisted and request will be discarded by firewall', max_length=255, null=True, verbose_name='blacklisted uri')),
                ('whitelisted_uri', models.CharField(blank=True, help_text='regex formatted uri those will be treated as whitelisted and request will be discarded by firewall if uri not match', max_length=255, null=True, verbose_name='whitelisted uri')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, verbose_name='Created On')),
                ('updated_on', models.DateTimeField(blank=True, null=True, verbose_name='Last updated')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', validators=[hacs.validators.ContentTypeValidator()])),
            ],
            options={
                'db_table': 'hacs_ct_routing_rules',
                'verbose_name': 'content type routing rules',
                'verbose_name_plural': 'content types routing rules',
            },
            managers=[
                ('objects', hacs.models.ContentTypeRoutingRulesManager()),
            ],
        ),
        migrations.CreateModel(
            name='RoutingTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route_name', models.SlugField(max_length=127, unique=True, verbose_name='route name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('urls', hacs.fields.SequenceField(validators=[hacs.validators.UrlModulesValidator()], verbose_name='URLs')),
                ('handlers', hacs.fields.DictField(blank=True, default='', null=True, validators=[hacs.validators.HttpHandlerValidator()], verbose_name='Handlers')),
                ('generated_module', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Generated Module')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Soft Delete')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, verbose_name='Created On')),
                ('updated_on', models.DateTimeField(blank=True, null=True, verbose_name='Last updated')),
            ],
            options={
                'db_table': 'hacs_routing_table',
                'verbose_name': 'routing table',
                'verbose_name_plural': 'routes table',
            },
            managers=[
                ('objects', hacs.models.RoutingTableManager()),
            ],
        ),
        migrations.CreateModel(
            name='SiteRoutingRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allowed_method', hacs.fields.SequenceField(blank=True, null=True, verbose_name='Allowed Method')),
                ('blacklisted_uri', models.CharField(blank=True, help_text='regex formatted uri those will be treated as blacklisted and request will be discarded by firewall', max_length=255, null=True, verbose_name='blacklisted uri')),
                ('whitelisted_uri', models.CharField(blank=True, help_text='regex formatted uri those will be treated as whitelisted and request will be discarded by firewall if uri not match', max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('maintenance_mode', models.BooleanField(default=False, help_text='Firewall will only response maintenance view and prevent any further execution for all request if it is on', verbose_name='Maintenance Mode')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, verbose_name='Created On')),
                ('updated_on', models.DateTimeField(blank=True, null=True, verbose_name='Last updated')),
                ('route', models.ForeignKey(db_column='route_id', db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='hacs_route_sites', to='hacs.RoutingTable')),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='hacs_site_routes', to='sites.Site')),
            ],
            options={
                'db_table': 'hacs_sites_routing_rules',
                'verbose_name': 'site routing rules',
                'verbose_name_plural': 'sites routing rules',
            },
            managers=[
                ('objects', hacs.models.SiteRoutingRulesManager()),
            ],
        ),
        migrations.AddField(
            model_name='contenttyperoutingrules',
            name='route',
            field=models.ForeignKey(db_column='route_id', db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='hacs_route_contenttypes', to='hacs.RoutingTable'),
        ),
        migrations.AddField(
            model_name='contenttyperoutingrules',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hacs_site_contenttypes_at_routing_rules', to='sites.Site'),
        ),
        migrations.AlterUniqueTogether(
            name='contenttyperoutingrules',
            unique_together=set([('site', 'content_type', 'object_id')]),
        ),
    ]
