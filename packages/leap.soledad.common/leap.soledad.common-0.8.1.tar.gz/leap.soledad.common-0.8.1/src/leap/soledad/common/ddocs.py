docs = 'eyJ2aWV3cyI6IHsiZ2V0IjogeyJtYXAiOiAiZnVuY3Rpb24oZG9jKSB7XG4gICAgaWYgKGRvYy51MWRiX3Jldikge1xuICAgICAgICB2YXIgaXNfdG9tYnN0b25lID0gdHJ1ZTtcbiAgICAgICAgdmFyIGhhc19jb25mbGljdHMgPSBmYWxzZTtcbiAgICAgICAgaWYgKGRvYy5fYXR0YWNobWVudHMpIHtcbiAgICAgICAgICAgIGlmIChkb2MuX2F0dGFjaG1lbnRzLnUxZGJfY29udGVudClcbiAgICAgICAgICAgICAgICBpc190b21ic3RvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChkb2MuX2F0dGFjaG1lbnRzLnUxZGJfY29uZmxpY3RzKVxuICAgICAgICAgICAgICAgIGhhc19jb25mbGljdHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVtaXQoZG9jLl9pZCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNvdWNoX3JldlwiOiBkb2MuX3JldixcbiAgICAgICAgICAgICAgICBcInUxZGJfcmV2XCI6IGRvYy51MWRiX3JldixcbiAgICAgICAgICAgICAgICBcImlzX3RvbWJzdG9uZVwiOiBpc190b21ic3RvbmUsXG4gICAgICAgICAgICAgICAgXCJoYXNfY29uZmxpY3RzXCI6IGhhc19jb25mbGljdHMsXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxufVxuIn19LCAiX2lkIjogIl9kZXNpZ24vZG9jcyJ9'
transactions = 'eyJsaXN0cyI6IHsidHJhbnNfaWRfZm9yX2dlbiI6ICJmdW5jdGlvbihoZWFkLCByZXEpIHtcbiAgICB2YXIgcm93O1xuICAgIHZhciByb3dzPVtdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgZ2VuID0gMTtcbiAgICBpZiAocmVxLnF1ZXJ5LmdlbilcbiAgICAgICAgZ2VuID0gcGFyc2VJbnQocmVxLnF1ZXJ5WydnZW4nXSk7XG4gICAgLy8gZmV0Y2ggYWxsIHJvd3NcbiAgICB3aGlsZShyb3cgPSBnZXRSb3coKSlcbiAgICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgaWYgKGdlbiA8PSByb3dzLmxlbmd0aClcbiAgICAgICAgc2VuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBcImdlbmVyYXRpb25cIjogZ2VuLFxuICAgICAgICAgICAgXCJkb2NfaWRcIjogcm93c1tnZW4tMV1bJ2lkJ10sXG4gICAgICAgICAgICBcInRyYW5zYWN0aW9uX2lkXCI6IHJvd3NbZ2VuLTFdWyd2YWx1ZSddLFxuICAgICAgICB9KSk7XG4gICAgZWxzZVxuICAgICAgICBzZW5kKCd7fScpO1xufVxuIiwgIndoYXRzX2NoYW5nZWQiOiAiZnVuY3Rpb24oaGVhZCwgcmVxKSB7XG4gICAgdmFyIHJvdztcbiAgICB2YXIgZ2VuID0gMTtcbiAgICB2YXIgb2xkX2dlbiA9IDA7XG4gICAgaWYgKHJlcS5xdWVyeS5vbGRfZ2VuKVxuICAgICAgICBvbGRfZ2VuID0gcGFyc2VJbnQocmVxLnF1ZXJ5WydvbGRfZ2VuJ10pO1xuICAgIHNlbmQoJ3tcInRyYW5zYWN0aW9uc1wiOltcXG4nKTtcbiAgICAvLyBmZXRjaCBhbGwgcm93c1xuICAgIHdoaWxlKHJvdyA9IGdldFJvdygpKSB7XG4gICAgICAgIGlmIChnZW4gPiBvbGRfZ2VuKSB7XG4gICAgICAgICAgICBpZiAoZ2VuID4gb2xkX2dlbisxKVxuICAgICAgICAgICAgICAgIHNlbmQoJyxcXG4nKTtcbiAgICAgICAgICAgIHNlbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIFwiZ2VuZXJhdGlvblwiOiBnZW4sXG4gICAgICAgICAgICAgICAgXCJkb2NfaWRcIjogcm93W1wiaWRcIl0sXG4gICAgICAgICAgICAgICAgXCJ0cmFuc2FjdGlvbl9pZFwiOiByb3dbXCJ2YWx1ZVwiXVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGdlbisrO1xuICAgIH1cbiAgICBzZW5kKCdcXG5dfScpO1xufVxuIiwgImdlbmVyYXRpb24iOiAiZnVuY3Rpb24oaGVhZCwgcmVxKSB7XG4gICAgdmFyIHJvdztcbiAgICB2YXIgcm93cz1bXTtcbiAgICAvLyBmZXRjaCBhbGwgcm93c1xuICAgIHdoaWxlKHJvdyA9IGdldFJvdygpKSB7XG4gICAgICAgIHJvd3MucHVzaChyb3cpO1xuICAgIH1cbiAgICBpZiAocm93cy5sZW5ndGggPiAwKVxuICAgICAgICBzZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIFwiZ2VuZXJhdGlvblwiOiByb3dzLmxlbmd0aCxcbiAgICAgICAgICAgIFwiZG9jX2lkXCI6IHJvd3Nbcm93cy5sZW5ndGgtMV1bJ2lkJ10sXG4gICAgICAgICAgICBcInRyYW5zYWN0aW9uX2lkXCI6IHJvd3Nbcm93cy5sZW5ndGgtMV1bJ3ZhbHVlJ11cbiAgICAgICAgfSkpO1xuICAgIGVsc2VcbiAgICAgICAgc2VuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBcImdlbmVyYXRpb25cIjogMCxcbiAgICAgICAgICAgIFwiZG9jX2lkXCI6IFwiXCIsXG4gICAgICAgICAgICBcInRyYW5zYWN0aW9uX2lkXCI6IFwiXCIsXG4gICAgICAgIH0pKTtcbn1cbiJ9LCAidmlld3MiOiB7ImxvZyI6IHsibWFwIjogImZ1bmN0aW9uKGRvYykge1xuICAgIGlmIChkb2MudTFkYl90cmFuc2FjdGlvbnMpXG4gICAgICAgIGRvYy51MWRiX3RyYW5zYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGVtaXQodFswXSwgIC8vIHVzZSB0aW1lc3RhbXAgYXMga2V5IHNvIHRoZSByZXN1bHRzIGFyZSBvcmRlcmVkXG4gICAgICAgICAgICAgICAgIHRbMV0pOyAvLyB2YWx1ZSBpcyB0aGUgdHJhbnNhY3Rpb25faWRcbiAgICAgICAgfSk7XG59XG4ifX0sICJfaWQiOiAiX2Rlc2lnbi90cmFuc2FjdGlvbnMifQ=='
syncs = 'eyJ1cGRhdGVzIjogeyJzdGF0ZSI6ICIvKipcbiAqIFRoaXMgdXBkYXRlIGhhbmRsZXIgc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IG9uZ29pbmcgc3luY2hyb25pemF0aW9uXG4gKiBhdHRlbXB0cyBmcm9tIGRpc3RpbmN0IHNvdXJjZSByZXBsaWNhcy5cbiAqXG4gKiBOb3JtYWxseSwgdTFkYiBzeW5jaHJvbml6YXRpb24gb2NjdXJzIGR1cmluZyBvbmUgUE9TVCByZXF1ZXN0LiBJbiBvcmRlciB0b1xuICogc3BsaXQgdGhhdCBpbnRvIG1hbnkgc2VyaWFsIFBPU1QgcmVxdWVzdHMsIHdlIHN0b3JlIHRoZSBzdGF0ZSBvZiBlYWNoIHN5bmNcbiAqIGluIHRoZSBzZXJ2ZXIsIHVzaW5nIGEgZG9jdW1lbnQgd2l0aCBpZCAndTFkYl9zeW5jX3N0YXRlJy4gIFRvIGlkZW50aWZ5XG4gKiBlYWNoIHN5bmMgYXR0ZW1wdCwgd2UgdXNlIGEgc3luY19pZCBzZW50IGJ5IHRoZSBjbGllbnQuIElmIHdlIGV2ZXIgcmVjZWl2ZVxuICogYSBuZXcgc3luY19pZCwgd2UgdHJhc2ggY3VycmVudCBkYXRhIGZvciB0aGF0IHNvdXJjZSByZXBsaWNhIGFuZCBzdGFydFxuICogb3Zlci5cbiAqXG4gKiBXZSBleHBlY3QgdGhlIGZvbGxvd2luZyBpbiB0aGUgZG9jdW1lbnQgYm9keTpcbiAqXG4gKiB7XG4gKiAgICAgJ3NvdXJjZV9yZXBsaWNhX3VpZCc6ICc8c291cmNlX3JlcGxpY2FfdWlkPicsXG4gKiAgICAgJ3N5bmNfaWQnOiAnPHN5bmNfaWQ+JyxcbiAqICAgICAnc2Vlbl9pZHMnOiBbWyc8ZG9jX2lkPicsIDxhdF9nZW4+XSwgLi4uXSwgICAgIC8vIG9wdGlvbmFsXG4gKiAgICAgJ2NoYW5nZXNfdG9fcmV0dXJuJzogWyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvcHRpb25hbFxuICogICAgICAgICAnZ2VuJzogPGdlbj4sXG4gKiAgICAgICAgICd0cmFuc19pZCc6ICc8dHJhbnNfaWQ+JyxcbiAqICAgICAgICAgJ2NoYW5nZXNfdG9fcmV0dXJuJzogW1s8ZG9jX2lkPicsIDxnZW4+LCAnPHRyYW5zX2lkPiddLCAuLi5dXG4gKiAgICAgXSxcbiAqIH1cbiAqXG4gKiBUaGUgZm9ybWF0IG9mIHRoZSBmaW5hbCBkb2N1bWVudCBzdG9yZWQgb24gc2VydmVyIGlzOlxuICpcbiAqIHtcbiAqICAgICAnX2lkJzogJzxzdHI+JyxcbiAqICAgICAnX3JldicgJzxzdHI+JyxcbiAqICAgICAnb25nb2luZ19zeW5jcyc6IHtcbiAqICAgICAgICAgJzxzb3VyY2VfcmVwbGljYV91aWQ+Jzoge1xuICogICAgICAgICAgICAgJ3N5bmNfaWQnOiAnPHN5bmNfaWQ+JyxcbiAqICAgICAgICAgICAgICdzZWVuX2lkcyc6IFtbJzxkb2NfaWQ+JywgPGF0X2dlbj5bLCAuLi5dLFxuICogICAgICAgICAgICAgJ2NoYW5nZXNfdG9fcmV0dXJuJzoge1xuICogICAgICAgICAgICAgICAgICAnZ2VuJzogPGdlbj4sXG4gKiAgICAgICAgICAgICAgICAgICd0cmFuc19pZCc6ICc8dHJhbnNfaWQ+JyxcbiAqICAgICAgICAgICAgICAgICAgJ2NoYW5nZXNfdG9fcmV0dXJuJzogW1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIFsnPGRvY19pZD4nLCA8Z2VuPiwgJzx0cmFuc19pZD4nXSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4sXG4gKiAgICAgICAgICAgICAgICAgIF0sXG4gKiAgICAgICAgICAgICB9LFxuICogICAgICAgICB9LFxuICogICAgICAgICAuLi4gLy8gaW5mbyBhYm91dCBvdGhlciBzb3VyY2UgcmVwbGljYXMgaGVyZVxuICogICAgIH1cbiAqIH1cbiAqL1xuZnVuY3Rpb24oZG9jLCByZXEpIHtcblxuICAgIC8vIHByZXZlbnQgdXBkYXRlcyB0byBhbGllbiBkb2N1bWVudHNcbiAgICBpZiAoZG9jICE9IG51bGwgJiYgZG9jWydfaWQnXSAhPSAndTFkYl9zeW5jX3N0YXRlJylcbiAgICAgICAgcmV0dXJuIFtudWxsLCAnaW52YWxpZCBkYXRhJ107XG5cbiAgICAvLyBjcmVhdGUgdGhlIGRvY3VtZW50IGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICBpZiAoIWRvYylcbiAgICAgICAgZG9jID0ge1xuICAgICAgICAgICAgJ19pZCc6ICd1MWRiX3N5bmNfc3RhdGUnLFxuICAgICAgICAgICAgJ29uZ29pbmdfc3luY3MnOiB7fSxcbiAgICAgICAgfTtcblxuICAgIC8vIHBhcnNlIGFuZCB2YWxpZGF0ZSBpbmNvbWluZyBkYXRhXG4gICAgdmFyIGJvZHkgPSBKU09OLnBhcnNlKHJlcS5ib2R5KTtcbiAgICBpZiAoYm9keVsnc291cmNlX3JlcGxpY2FfdWlkJ10gPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIFtudWxsLCAnaW52YWxpZCBkYXRhJ107XG4gICAgdmFyIHNvdXJjZV9yZXBsaWNhX3VpZCA9IGJvZHlbJ3NvdXJjZV9yZXBsaWNhX3VpZCddO1xuXG4gICAgaWYgKGJvZHlbJ3N5bmNfaWQnXSA9PSBudWxsKVxuICAgICAgICByZXR1cm4gW251bGwsICdpbnZhbGlkIGRhdGEnXTtcbiAgICB2YXIgc3luY19pZCA9IGJvZHlbJ3N5bmNfaWQnXTtcblxuICAgIC8vIHRyYXNoIG91dGRhdGVkIHN5bmMgZGF0YSBmb3IgdGhhdCByZXBsaWNhIGlmIHRoYXQgZXhpc3RzXG4gICAgaWYgKGRvY1snb25nb2luZ19zeW5jcyddW3NvdXJjZV9yZXBsaWNhX3VpZF0gIT0gbnVsbCAmJlxuICAgICAgICAgICAgZG9jWydvbmdvaW5nX3N5bmNzJ11bc291cmNlX3JlcGxpY2FfdWlkXVsnc3luY19pZCddICE9IHN5bmNfaWQpXG4gICAgICAgIGRlbGV0ZSBkb2NbJ29uZ29pbmdfc3luY3MnXVtzb3VyY2VfcmVwbGljYV91aWRdO1xuXG4gICAgLy8gY3JlYXRlIGFuIGVudHJ5IGZvciB0aGF0IHNvdXJjZSByZXBsaWNhXG4gICAgaWYgKGRvY1snb25nb2luZ19zeW5jcyddW3NvdXJjZV9yZXBsaWNhX3VpZF0gPT0gbnVsbClcbiAgICAgICAgZG9jWydvbmdvaW5nX3N5bmNzJ11bc291cmNlX3JlcGxpY2FfdWlkXSA9IHtcbiAgICAgICAgICAgICdzeW5jX2lkJzogc3luY19pZCxcbiAgICAgICAgICAgICdzZWVuX2lkcyc6IHt9LFxuICAgICAgICAgICAgJ2NoYW5nZXNfdG9fcmV0dXJuJzogbnVsbCxcbiAgICAgICAgfTtcblxuICAgIC8vIGluY29taW5nIG1ldGEtZGF0YSB2YWx1ZXMgc2hvdWxkIGJlIGV4Y2x1c2l2ZSwgc28gd2UgY291bnQgaG93IG1hbnlcbiAgICAvLyBhcnJpdmVkIGFuZCBkZW55IHRvIGFjY29tcGxpc2ggdGhlIHRyYW5zYWN0aW9uIGlmIHRoZSBjb3VudCBpcyBoaWdoLlxuICAgIHZhciBpbmNvbWluZ192YWx1ZXMgPSAwO1xuICAgIHZhciBpbmZvID0gZG9jWydvbmdvaW5nX3N5bmNzJ11bc291cmNlX3JlcGxpY2FfdWlkXVxuXG4gICAgLy8gYWRkIGluY29taW5nIHNlZW4gaWRcbiAgICBpZiAoJ3NlZW5faWQnIGluIGJvZHkpIHtcbiAgICAgICAgaW5mb1snc2Vlbl9pZHMnXVtib2R5WydzZWVuX2lkJ11bMF1dID0gYm9keVsnc2Vlbl9pZCddWzFdO1xuICAgICAgICBpbmNvbWluZ192YWx1ZXMgKz0gMTtcbiAgICB9XG5cbiAgICAvLyBhZGQgaW5jb21pbmcgY2hhbmdlc190b19yZXR1cm5cbiAgICBpZiAoJ2NoYW5nZXNfdG9fcmV0dXJuJyBpbiBib2R5KSB7XG4gICAgICAgIGluZm9bJ2NoYW5nZXNfdG9fcmV0dXJuJ10gPSBib2R5WydjaGFuZ2VzX3RvX3JldHVybiddO1xuICAgICAgICBpbmNvbWluZ192YWx1ZXMgKz0gMTtcbiAgICB9XG5cbiAgICBpZiAoaW5jb21pbmdfdmFsdWVzICE9IDEpXG4gICAgICAgIHJldHVybiBbbnVsbCwgJ2ludmFsaWQgZGF0YSddO1xuXG4gICAgcmV0dXJuIFtkb2MsICdvayddO1xufVxuXG4ifSwgInZpZXdzIjogeyJzdGF0ZSI6IHsibWFwIjogImZ1bmN0aW9uKGRvYykge1xuICBpZiAoZG9jWydfaWQnXSA9PSAndTFkYl9zeW5jX3N0YXRlJyAmJiBkb2NbJ29uZ29pbmdfc3luY3MnXSAhPSBudWxsKVxuICAgIGZvciAodmFyIHNvdXJjZV9yZXBsaWNhX3VpZCBpbiBkb2NbJ29uZ29pbmdfc3luY3MnXSkge1xuICAgICAgdmFyIGNoYW5nZXMgPSBkb2NbJ29uZ29pbmdfc3luY3MnXVtzb3VyY2VfcmVwbGljYV91aWRdWydjaGFuZ2VzX3RvX3JldHVybiddO1xuICAgICAgdmFyIHN5bmNfaWQgPSBkb2NbJ29uZ29pbmdfc3luY3MnXVtzb3VyY2VfcmVwbGljYV91aWRdWydzeW5jX2lkJ107XG4gICAgICBpZiAoY2hhbmdlcyA9PSBudWxsKVxuICAgICAgICBlbWl0KFtzb3VyY2VfcmVwbGljYV91aWQsIHN5bmNfaWRdLCBudWxsKTtcbiAgICAgIGVsc2VcbiAgICAgICAgZW1pdChcbiAgICAgICAgICBbc291cmNlX3JlcGxpY2FfdWlkLCBzeW5jX2lkXSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAnZ2VuJzogY2hhbmdlc1snZ2VuJ10sXG4gICAgICAgICAgICAndHJhbnNfaWQnOiBjaGFuZ2VzWyd0cmFuc19pZCddLFxuICAgICAgICAgICAgJ251bWJlcl9vZl9jaGFuZ2VzJzogY2hhbmdlc1snY2hhbmdlc190b19yZXR1cm4nXS5sZW5ndGhcbiAgICAgICAgICB9KTtcbiAgICB9XG59XG4ifSwgImNoYW5nZXNfdG9fcmV0dXJuIjogeyJtYXAiOiAiZnVuY3Rpb24oZG9jKSB7XG4gIGlmIChkb2NbJ19pZCddID09ICd1MWRiX3N5bmNfc3RhdGUnICYmIGRvY1snb25nb2luZ19zeW5jcyddICE9IG51bGwpXG4gICAgZm9yICh2YXIgc291cmNlX3JlcGxpY2FfdWlkIGluIGRvY1snb25nb2luZ19zeW5jcyddKSB7XG4gICAgICB2YXIgY2hhbmdlcyA9IGRvY1snb25nb2luZ19zeW5jcyddW3NvdXJjZV9yZXBsaWNhX3VpZF1bJ2NoYW5nZXNfdG9fcmV0dXJuJ107XG4gICAgICB2YXIgc3luY19pZCA9IGRvY1snb25nb2luZ19zeW5jcyddW3NvdXJjZV9yZXBsaWNhX3VpZF1bJ3N5bmNfaWQnXTtcbiAgICAgIGlmIChjaGFuZ2VzID09IG51bGwpXG4gICAgICAgIGVtaXQoW3NvdXJjZV9yZXBsaWNhX3VpZCwgc3luY19pZCwgMF0sIG51bGwpO1xuICAgICAgZWxzZSBpZiAoY2hhbmdlcy5sZW5ndGggPT0gMClcbiAgICAgICAgZW1pdChbc291cmNlX3JlcGxpY2FfdWlkLCBzeW5jX2lkLCAwXSwgW10pO1xuICAgICAgZWxzZVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYW5nZXNbJ2NoYW5nZXNfdG9fcmV0dXJuJ10ubGVuZ3RoOyBpKyspXG4gICAgICAgICAgZW1pdChcbiAgICAgICAgICAgIFtzb3VyY2VfcmVwbGljYV91aWQsIHN5bmNfaWQsIGldLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAnZ2VuJzogY2hhbmdlc1snZ2VuJ10sXG4gICAgICAgICAgICAgICd0cmFuc19pZCc6IGNoYW5nZXNbJ3RyYW5zX2lkJ10sXG4gICAgICAgICAgICAgICduZXh0X2NoYW5nZV90b19yZXR1cm4nOiBjaGFuZ2VzWydjaGFuZ2VzX3RvX3JldHVybiddW2ldLFxuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuIn0sICJzZWVuX2lkcyI6IHsibWFwIjogImZ1bmN0aW9uKGRvYykge1xuICBpZiAoZG9jWydfaWQnXSA9PSAndTFkYl9zeW5jX3N0YXRlJyAmJiBkb2NbJ29uZ29pbmdfc3luY3MnXSAhPSBudWxsKVxuICAgIGZvciAodmFyIHNvdXJjZV9yZXBsaWNhX3VpZCBpbiBkb2NbJ29uZ29pbmdfc3luY3MnXSkge1xuICAgICAgdmFyIHN5bmNfaWQgPSBkb2NbJ29uZ29pbmdfc3luY3MnXVtzb3VyY2VfcmVwbGljYV91aWRdWydzeW5jX2lkJ107XG4gICAgICBlbWl0KFxuICAgICAgICBbc291cmNlX3JlcGxpY2FfdWlkLCBzeW5jX2lkXSxcbiAgICAgICAge1xuICAgICAgICAgICdzZWVuX2lkcyc6IGRvY1snb25nb2luZ19zeW5jcyddW3NvdXJjZV9yZXBsaWNhX3VpZF1bJ3NlZW5faWRzJ10sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJ9fSwgIl9pZCI6ICJfZGVzaWduL3N5bmNzIn0='
