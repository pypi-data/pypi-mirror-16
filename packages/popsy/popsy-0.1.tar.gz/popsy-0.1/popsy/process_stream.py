import datetime
import numpy as np

"""
Functions for processing streaming POPS raw count data and calculating
size distribution properties, such as total concentration and average diameters.

Todo:
    * Add calculations for surface area, estimated mass, mean diameters.
"""

def parse_time(time_str):
    """
    Converts a timestamp from Labview POPS DAQ program to datetime object.
    :param time_str: string read from streaming data generated by labview code
    :return this_time: python datetime object
    """
    yr = int(time_str[0:4])
    mo = int(time_str[4:6])
    dy = int(time_str[6:8])
    hr = int(time_str[9:11])
    mn = int(time_str[11:13])
    ss = int((float(time_str[13:18])))

    this_time = datetime.datetime(yr, mo, dy, hr, mn, ss)
    return this_time


def parse_incoming(pops, data_line):
    """
    Converts incoming data from a POPS instrument to physical parameters,
    including time, concentrations, bin information, and size distributions.

    :param pops: current instrument object
    :param data_line: input string of data to be parsed into physical parameters
    :return out_data: dictionary containing physical parameters in data
    """
    data = data_line.split(',')
    current_time = parse_time(data[1])
    nconc = data[3]
    flow = float(data[4])
    ncol = len(data)
    pops.numbins = ncol - 9  # streaming data has 6 columns before bin data
    bin_counts = [float(i) for i in data[-pops.numbins:]]
    moments = calc_moments(pops, bin_counts, flow)

    out_data = {
        "time": current_time,
        "nconc": nconc,  # number / cm3
        "flow": flow,  # LPM
        "nbins": pops.numbins,  # number of bins
        "bin_counts": bin_counts,  # counts in each bin
        "diam_lim": pops.diam_lim,  # lower and upper limits for each bin (nm)
        "dndlogdp": moments['dndlogdp'],  # normalized number distribution
        "dvdlogdp": moments['dvdlogdp'],  # normalized volume distribution
        "vconc": moments['vconc']  # volume concentration (um3 / cm3)
    }
    return out_data


def calc_moments(pops, bin_counts, flow):
    """
    Calculates various moments (number, surface area, volume, mass) for
    POPS measured size distributions. Also calculates total concentrations
    and average values for size distributions weighted by number, volume.
    :param pops: an instrument object for current POPS being read
    :param bin_counts: counts in each POPS bin
    :param flow: reported POPS sample flow rate (LPM)
    :return moments: dictionary containing various output parameters
    """
    pops.bin_limits()  # calculates bin limits for current instrument from cal
    dlogdp = np.log10(pops.diam_lim[1:]) - np.log10(pops.diam_lim[:-1])
    dndlogdp = bin_counts / dlogdp
    dvdlogdp = dndlogdp * np.pi/6.0 * (pops.diam_gmid/1000.0) ** 3
    vconc = np.sum(dvdlogdp * dlogdp) / flow * 1000/60.  # um3 / cm3

    #  TODO Add calculations for surface area, estimated mass, & mean diameters

    moments = {
        "dndlogdp": dndlogdp,
        "dvdlogdp": dvdlogdp,
        "vconc": vconc
    }
    return moments
