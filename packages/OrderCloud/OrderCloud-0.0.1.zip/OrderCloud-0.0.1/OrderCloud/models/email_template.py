# coding: utf-8

"""
    OrderCloud

    A full ecommerce backend as a service.

    OpenAPI spec version: 0.1
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EmailTemplate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, subject=None, body=None, reply_email=None, send_message_type=None, email_format_type=None):
        """
        EmailTemplate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'subject': 'str',
            'body': 'str',
            'reply_email': 'str',
            'send_message_type': 'bool',
            'email_format_type': 'str'
        }

        self.attribute_map = {
            'subject': 'Subject',
            'body': 'Body',
            'reply_email': 'ReplyEmail',
            'send_message_type': 'SendMessageType',
            'email_format_type': 'EmailFormatType'
        }

        self._subject = subject
        self._body = body
        self._reply_email = reply_email
        self._send_message_type = send_message_type
        self._email_format_type = email_format_type

    @property
    def subject(self):
        """
        Gets the subject of this EmailTemplate.


        :return: The subject of this EmailTemplate.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this EmailTemplate.


        :param subject: The subject of this EmailTemplate.
        :type: str
        """

        self._subject = subject

    @property
    def body(self):
        """
        Gets the body of this EmailTemplate.


        :return: The body of this EmailTemplate.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this EmailTemplate.


        :param body: The body of this EmailTemplate.
        :type: str
        """

        self._body = body

    @property
    def reply_email(self):
        """
        Gets the reply_email of this EmailTemplate.


        :return: The reply_email of this EmailTemplate.
        :rtype: str
        """
        return self._reply_email

    @reply_email.setter
    def reply_email(self, reply_email):
        """
        Sets the reply_email of this EmailTemplate.


        :param reply_email: The reply_email of this EmailTemplate.
        :type: str
        """

        self._reply_email = reply_email

    @property
    def send_message_type(self):
        """
        Gets the send_message_type of this EmailTemplate.


        :return: The send_message_type of this EmailTemplate.
        :rtype: bool
        """
        return self._send_message_type

    @send_message_type.setter
    def send_message_type(self, send_message_type):
        """
        Sets the send_message_type of this EmailTemplate.


        :param send_message_type: The send_message_type of this EmailTemplate.
        :type: bool
        """

        self._send_message_type = send_message_type

    @property
    def email_format_type(self):
        """
        Gets the email_format_type of this EmailTemplate.


        :return: The email_format_type of this EmailTemplate.
        :rtype: str
        """
        return self._email_format_type

    @email_format_type.setter
    def email_format_type(self, email_format_type):
        """
        Sets the email_format_type of this EmailTemplate.


        :param email_format_type: The email_format_type of this EmailTemplate.
        :type: str
        """

        self._email_format_type = email_format_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
