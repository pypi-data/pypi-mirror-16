#!/usr/bin/env python3

import argparse
import requests
import os
import json
import sys
import time
from subprocess import PIPE, Popen, TimeoutExpired
from subprocess import CalledProcessError, check_output
from pymacaroons import Macaroon


DEVPORTAL = 'https://myapps.developer.ubuntu.com/dev/api/'
UPDOWN = 'https://upload.apps.ubuntu.com/'
SSO = 'https://login.ubuntu.com/api/'

UPLOAD_URL = UPDOWN + 'unscanned-upload/'
PUSH_URL = DEVPORTAL + 'snap-push/'
RELEASE_URL = DEVPORTAL + 'snap-release/'
REFRESH_URL = SSO + 'v2/tokens/refresh'

MACAROON_FILE = '.snapstore-publish-macaroon.enc'


class StoreException(Exception):
    pass


def post(url, **kwargs):
    '''POST to the specified URL.

    :return: json response object on success, None on error.
    :raises: StoreException on error
    '''
    req = requests.request('POST', url, **kwargs)
    try:
        req.raise_for_status()
    except requests.exceptions.HTTPError:
        message = 'Got {} on {}:\n{}'
        message = message.format(req.status_code, url, req.text)
        raise StoreException(message)

    return req.json()


def wait_for_revision(details_url, tries=10, sleep=30):
    '''Wait for the store to give a revision for the upload.

    :return: The positive revision integer on success
    :raises: StoreException on error
    '''
    data = '<no request>'
    for _ in range(tries):
        req = requests.request('GET', details_url)
        data = req.json()
        if data.get('processed', False):
            if data.get('can_release', False):
                return data['revision']
            else:
                message = 'Could not get a revision for the upload.'
                raise StoreException(message)
        time.sleep(sleep)

    message = 'Timed out after waiting {} seconds for revision on {}:\n{}'
    message = message.format(tries * sleep, details_url, data)
    raise StoreException(message)


def print_channel_map(channel_map):
    '''Print a channel map, e.g.:

    Channel    Revision
    stable     -
    candidate  5
    beta       ^
    edge       ^
    '''
    # Longest string plus two characters.
    col = max(len(c.get('channel', '')) for c in channel_map) + 2

    if channel_map:
        padding = ' ' * (col - len('Channel'))
        print('Channel{}Revision'.format(padding))

    for channel in channel_map:
        padding = ' ' * (col - len(channel['channel']))
        print(channel['channel'], end=padding)
        if 'revision' in channel:
            print(channel['revision'])
        else:
            print('^' if channel.get('info') == 'tracking' else '-')


def from_env():
    '''Returns the decrypted value of the AUTH_MACAROON environment
    variable.

    :return:tuple of (macaroon, discharge)
    :raises:RuntimeError on missing MACAROON_SECRET or
            AUTH_MACAROON
    :raises:RuntimeError when macaroon cannot be decrypted or
            json-decoded
    '''

    if 'MACAROON_SECRET' not in os.environ:
        m = 'MACAROON_SECRET not set in the environment.'
        raise RuntimeError(m)
    if 'AUTH_MACAROON' not in os.environ:
        m = 'AUTH_MACAROON not set in the environment.'
        raise RuntimeError(m)

    cmd = ['openssl', 'enc', '-aes-256-cbc', '-base64', '-d',
           '-pass', 'env:MACAROON_SECRET']
    try:
        p = Popen(cmd, stdin=PIPE, stdout=PIPE,
                  universal_newlines=True)
        out, _ = p.communicate(input=os.environ['AUTH_MACAROON'])
    except TimeoutExpired:
        p.kill()
    if p.returncode or not out:
        raise RuntimeError('Could not decrypt AUTH_MACAROON')
    
    try:
        out = json.loads(out)
        return (out['macaroon'], out['discharge'])
    except json.decoder.JSONDecodeError:
        raise RuntimeError('Could not decode AUTH_MACAROON')


def upload_snap(snap_file):
    '''Upload the snap binary to the Store.'''

    headers = {'Accept': 'application/json'}
    files = {'binary': open(snap_file, 'rb')}
    result = post(UPLOAD_URL, headers=headers, files=files)
    return result['upload_id']


def notify_store_of_upload(upload_id, auth_macaroon, name, series):
    '''Tell the Store of the completed upload.'''

    headers = {'Content-Type': 'application/json',
               'Accept':'application/json',
               'Authorization': auth_macaroon}

    data = {'updown_id': upload_id,
            'name': name,
            'series': series}
    result = post(PUSH_URL, headers=headers, data=json.dumps(data))
    return result['status_details_url']


def publish_snap(revision, auth_macaroon, name, series, channels):
    '''Publish the snap to SNAP_CHANNELS in SNAP_SERIES.'''

    headers = {'Content-Type': 'application/json',
               'Accept':'application/json',
               'Authorization': auth_macaroon}

    data = {'name': name,
            'revision': revision,
            'channels': channels,
            'series': series}
    data = json.dumps(data)
    result = post(RELEASE_URL, headers=headers, data=data)
    if not result.get('success'):
        raise StoreException('Could not publish.')

    return result


def from_disk():
    '''Fetch the macaroon and discharge from an encrypted file on
    disk.

    :returns:a tuple of (macaroon, discharge)
    :returns:a tuple of (None, None) if the file does not exist
    :raises:RuntimeError if the file cannot be decrypted or decoded
    '''

    if 'MACAROON_SECRET' not in os.environ:
        m = 'MACAROON_SECRET not set in the environment.'
        raise RuntimeError(m)
    path = os.path.join(os.path.expanduser('~'), MACAROON_FILE)
    if not os.path.exists(path):
        return (None, None)

    cmd = ['openssl', 'enc', '-aes-256-cbc', '-base64', '-d',
           '-pass', 'env:MACAROON_SECRET', '-in', path]
    try:
        r = check_output(cmd, universal_newlines=True)
        r = json.loads(r)
        return (r['macaroon'], r['discharge'])

    except CalledProcessError:
        raise RuntimeError('Could not decrypt macaroon file.')
    except json.decoder.JSONDecodeError:
        raise RuntimeError('Could not decode macaroon file.')


def save(macaroon, discharge):
    '''Encrypts the provided macaroon using AES-256 with the secret
    from MACAROON_SECRET. Writes the encrypted macaroon to
    MACAROON_FILE
    '''
    if 'MACAROON_SECRET' not in os.environ:
        m = 'MACAROON_SECRET not set in the environment.'
        raise RuntimeError(m)

    path = os.path.join(os.path.expanduser('~'), MACAROON_FILE)
    contents = {'macaroon': macaroon, 'discharge': discharge}
    contents = json.dumps(contents)

    cmd = ['openssl', 'enc', '-aes-256-cbc', '-pass',
           'env:MACAROON_SECRET', '-base64', '-out', path]
    try:
        p = Popen(cmd, stdin=PIPE, universal_newlines=True)
        p.communicate(input=contents)
    except TimeoutExpired:
        p.kill()

    if p.returncode:
        raise RuntimeError('Could not encrypt macaroon file.')


def refresh(discharge):
    '''Refresh the given discharge.

    :return:new discharge
    '''
    data = {'discharge_macaroon': discharge}
    headers = {'Content-Type': 'application/json',
               'Accept':'application/json'}
    data = json.dumps(data)
    result = post(REFRESH_URL, headers=headers, data=data)
    return result['discharge_macaroon']


def get_auth_macaroon(macaroon, discharge):
    m = Macaroon.deserialize(macaroon)
    d = Macaroon.deserialize(discharge)
    bound = m.prepare_for_request(d)

    auth = 'Macaroon root={}, discharge={}'
    auth = auth.format(macaroon, bound.serialize())
    return auth


def args():
    desc = 'Publish a snap to a given series and list of channels.'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--name', nargs='?', required=True)
    parser.add_argument('--series', nargs='?', required=True)
    parser.add_argument('--channel', nargs='?', action='append',
                        required=True)
    parser.add_argument('FILE')
    return parser.parse_args()


def main():
    try:
        opts = args()
        macaroon, discharge = from_disk()
        if not macaroon or not discharge:
            macaroon, discharge = from_env()
        discharge = refresh(discharge)
        save(macaroon, discharge)
        macaroon = get_auth_macaroon(macaroon, discharge)

        upload_id = upload_snap(opts.FILE)
        status_url = notify_store_of_upload(upload_id, macaroon, opts.name,
                                            opts.series)
        revision = wait_for_revision(status_url)
        msg = 'Revision {} of {} created.'
        print(msg.format(revision, opts.FILE))
        print()
        result = publish_snap(revision, macaroon, opts.name, opts.series,
                              opts.channel)
        print_channel_map(result.get('channel_map', []))
        return 0
    except (StoreException, RuntimeError) as e:
        print('Error: {}'.format(e), file=sys.stderr)
        return 1


if __name__ == '__main__':
    sys.exit(main())
