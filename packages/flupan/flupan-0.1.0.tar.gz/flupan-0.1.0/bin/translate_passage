#!/usr/bin/env python
import __future__
import flupan
import argparse


def parse_file(infile):
    '''
    If given a file of passage IDs (one per line), cycle through each one
    '''

    pp = flupan.PassageParser()
    with open(infile, "r") as passageIDs:
            for ID in passageIDs.readlines():
                 annotation = pp.parse_passage(ID) 
                 return annotation
def parsing(passage):
    '''
    If given a single passage ID, get the summary
    '''
    pp = flupan.PassageParser()
  
    p = pp.parse_passage(passage) 
    return p.summary

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='A tool to parse influenza passaging annotations')
    parser.add_argument('-f', '--infile', action='store', help = 'A files of passage IDs, ex M1 S4, one per line', required=False)
    parser.add_argument('-p', '--passage',  action='store', help = 'A single passage ID to be parsed, ex. E4', required=False)
    parser.add_argument('-o', '--outfile', action='store', help = 'An outfile to store output', required=False, default='interpreted_passage.txt')

    args = parser.parse_args()
    
    if not args.infile and not args.passage:
        sys.exit("No arguments, either provide a file (-f) or single passage identifier (-p)")
        s
    if args.infile and args.passage:
        sys.exit("please provide either a text file of passages or a single passage ID, but not both")
       
 

    if args.infile:
        annotation = parse_file(args.infile)

    if args.passage:
        annotation = parsing(args.passage)
        print(",".join(annotation))

    if args.outfile:
        with open(args.outfile, "w") as outf:
             outf.write(",".join(annotation) + "\n")








