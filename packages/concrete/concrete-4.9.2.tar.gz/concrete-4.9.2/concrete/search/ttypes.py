# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings,coding=utf-8
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import concrete.structure.ttypes
import concrete.uuid.ttypes
import concrete.metadata.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class SearchQuery(object):
  """
  Wrapper for information relevant to a (possibly structured) search.

  Attributes:
   - keywords: Individual words, or multiword phrases, e.g., 'dog', 'blue
  cheese'.  It is the responsibility of the implementation of
  Search* to tokenize multiword phrases, if so-desired.  Further,
  an implementation may choose to support advanced features such as
  wildcards, e.g.: 'blue *'.  This specification makes no
  committment as to the internal structure of keywords and their
  semantics: that is the responsibility of the individual
  implementation.
   - questions: e.g., "what is the capital of spain?"

  questions is a list in order that possibly different phrasings of
  the question can be included, e.g.: "what is the name of spain's
  capital?"
   - communicationId: Refers to an optional communication that can provide context for the query.
   - tokens: Refers to a sequence of tokens in the communication referenced by communicationId.
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keywords', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'questions', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'communicationId', None, None, ), # 3
    (4, TType.STRUCT, 'tokens', (concrete.structure.ttypes.TokenRefSequence, concrete.structure.ttypes.TokenRefSequence.thrift_spec), None, ), # 4
  )

  def __init__(self, keywords=None, questions=None, communicationId=None, tokens=None,):
    self.keywords = keywords
    self.questions = questions
    self.communicationId = communicationId
    self.tokens = tokens

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keywords = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.keywords.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.questions = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString().decode('utf-8')
            self.questions.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.communicationId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.tokens = concrete.structure.ttypes.TokenRefSequence()
          self.tokens.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SearchQuery')
    if self.keywords is not None:
      oprot.writeFieldBegin('keywords', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keywords))
      for iter12 in self.keywords:
        oprot.writeString(iter12.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.questions is not None:
      oprot.writeFieldBegin('questions', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.questions))
      for iter13 in self.questions:
        oprot.writeString(iter13.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.communicationId is not None:
      oprot.writeFieldBegin('communicationId', TType.STRING, 3)
      oprot.writeString(self.communicationId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.tokens is not None:
      oprot.writeFieldBegin('tokens', TType.STRUCT, 4)
      self.tokens.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keywords)
    value = (value * 31) ^ hash(self.questions)
    value = (value * 31) ^ hash(self.communicationId)
    value = (value * 31) ^ hash(self.tokens)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SearchResult(object):
  """
  An individual element returned from a search.  Most/all methods
  will return a communicationId, possibly with an associated score.
  For example if the target element type of the search is Sentence
  then the sentenceId field should be populated.

  Attributes:
   - communicationId
   - sentenceId: The UUID of the returned sentence, which appears in the
  communication referenced by communicationId.
   - score: Values are not restricted in range (e.g., do not have to be
  within [0,1]).  Higher is better.

  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'communicationId', None, None, ), # 1
    (2, TType.STRUCT, 'sentenceId', (concrete.uuid.ttypes.UUID, concrete.uuid.ttypes.UUID.thrift_spec), None, ), # 2
    (3, TType.DOUBLE, 'score', None, None, ), # 3
  )

  def __init__(self, communicationId=None, sentenceId=None, score=None,):
    self.communicationId = communicationId
    self.sentenceId = sentenceId
    self.score = score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.communicationId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.sentenceId = concrete.uuid.ttypes.UUID()
          self.sentenceId.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SearchResult')
    if self.communicationId is not None:
      oprot.writeFieldBegin('communicationId', TType.STRING, 1)
      oprot.writeString(self.communicationId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sentenceId is not None:
      oprot.writeFieldBegin('sentenceId', TType.STRUCT, 2)
      self.sentenceId.write(oprot)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 3)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.communicationId)
    value = (value * 31) ^ hash(self.sentenceId)
    value = (value * 31) ^ hash(self.score)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SearchResults(object):
  """
  Single wrapper for results from all the various Search* services.

  Attributes:
   - searchResults: The list is assumed sorted best to worst, which should be
  reflected by the values contained in the score field of each
  SearchResult, if that field is populated.
   - searchQuery: The query that led to this result: likely use case for populating
  this field is for building training data.  Presumably a
  system will not need/want to return this object in live use.
   - metadata: The system that provided the response: likely use case for
  populating this field is for building training data.  Presumably
  a system will not need/want to return this object in live use.
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'searchResults', (TType.STRUCT,(SearchResult, SearchResult.thrift_spec)), None, ), # 1
    (2, TType.STRUCT, 'searchQuery', (SearchQuery, SearchQuery.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'metadata', (concrete.metadata.ttypes.AnnotationMetadata, concrete.metadata.ttypes.AnnotationMetadata.thrift_spec), None, ), # 3
  )

  def __init__(self, searchResults=None, searchQuery=None, metadata=None,):
    self.searchResults = searchResults
    self.searchQuery = searchQuery
    self.metadata = metadata

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.searchResults = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = SearchResult()
            _elem19.read(iprot)
            self.searchResults.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.searchQuery = SearchQuery()
          self.searchQuery.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.metadata = concrete.metadata.ttypes.AnnotationMetadata()
          self.metadata.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SearchResults')
    if self.searchResults is not None:
      oprot.writeFieldBegin('searchResults', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.searchResults))
      for iter20 in self.searchResults:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.searchQuery is not None:
      oprot.writeFieldBegin('searchQuery', TType.STRUCT, 2)
      self.searchQuery.write(oprot)
      oprot.writeFieldEnd()
    if self.metadata is not None:
      oprot.writeFieldBegin('metadata', TType.STRUCT, 3)
      self.metadata.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.searchResults)
    value = (value * 31) ^ hash(self.searchQuery)
    value = (value * 31) ^ hash(self.metadata)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
