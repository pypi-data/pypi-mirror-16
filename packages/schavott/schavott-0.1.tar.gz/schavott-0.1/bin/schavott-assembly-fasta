#!/usr/bin/env python
import sys
import argparse
import os
import poretools
import time
import timeit
import datetime

from schavott.mini import run_mini
from schavott.contig_info import get_N50, get_contigs, get_contig_sizes

from watchdog.observers import Observer
from watchdog.events import PatternMatchingEventHandler

from bokeh.io import hplot
from bokeh.plotting import figure, curdoc
from bokeh.client import push_session
from bokeh.models import ColumnDataSource, HoverTool

import numpy as np
from numpy import pi


def assembly_time(args, list_of_files, counter):
    """Use timer to start scaffolding process.

    Args:
        args: Object with command line arguments.
        list_of_files (list): List with filenames
    Returns:
    """
    global tic
    toc = timeit.default_timer()
    if toc - tic > int(args.intensity):
        scaffolds, counter = run_assembly(args, list_of_files, counter)
        print("Scaffolds: " + str(scaffolds))
        tic = timeit.default_timer()

    return counter


def assembly_reads(args, list_of_files, counter):
    """Use read counts to start scaffolding process.

    Args:
        args: Object with command line arguments.
        list_of_files (list): List with filenames
    """
    if len(list_of_files) % int(args.intensity) == 0:
        scaffolds, counter = run_assembly(args, list_of_files, counter)
        print("Scaffolds: " + str(scaffolds))
        # if scaffolds <= int(args.stop) or completed is True:
        #     print("In stop if")
        #     completed = stop()

    return counter


def run_assembly(args, list_of_files, counter):
    """Start scaffolding.

    Args:
        args: Object with command line arguments.
        list_of_files (list): List with filenames
    Returns:
        number_of_scaffolds
    """
    scaffolds, counter = run_mini(list_of_files,
                                  args.output,
                                  counter,
                                  args.intensity)
    update(counter)
    return scaffolds, counter


def short_read_assembly(path):
    """ Get short read assembly data. """
    n50 = get_N50(path)
    short_read_contigs = get_contigs(path)
    contig_sizes = get_contig_sizes(path)
    start_time = datetime.datetime.now().time()
    short_read_assembly_data = [0, [n50], [0],
                                [short_read_contigs],
                                contig_sizes, [0], [0], [start_time]]
    return short_read_assembly_data


def bokeh_plots(counter):
    """ Setup bokeh plots. """
    global source
    source = ColumnDataSource(dict(
        reads=counter[2],
        scaffolds=counter[3],
        n50=counter[1]
    ))
    # circle = calculate_circle(counter)
    global contig_src
    contig_src = ColumnDataSource(dict(start=[0],
                                       stop=[0],
                                       colors=['red'],
                                       contigs=['']))
    global read_src
    read_src = ColumnDataSource(dict(reads_created=counter[7],
                                     num_reads=counter[6]))
    # setup bokeh-plots
    n50_plot = n50(source, counter)
    contig_numbers_plot = contig_numbers(source, counter)
    contig_circle_plot = contig_circle(contig_src)
    read_time_plot = read_time(read_src, counter)
    layout = hplot(contig_numbers_plot,
                   n50_plot,
                   contig_circle_plot,
                   read_time_plot)
    session = push_session(curdoc())
    session.show()

def read_time(read_src, counter):
    """Plot number of reads over time."""
    plot = figure(x_axis_type='datetime')
    plot.circle(x='reads_created', y='num_reads', source=read_src, size=10, color='red')
    plot.title = 'Reads'
    plot.xaxis.axis_label = 'Reads'
    plot.yaxis.axis_label = 'N50'

    return plot


def n50(source, counter):
    """ Create N50 plot."""
    plot = figure()
    plot.circle(x='reads', y='n50', source=source, size=6, color='red')
    plot.line(x='reads', y='n50', source=source, color='red')
    plot.title = 'N50 values'
    plot.xaxis.axis_label = 'Reads'
    plot.yaxis.axis_label = 'N50'

    return plot


def contig_numbers(source, counter):
    """Create contig number plot. """
    plot = figure()
    plot.circle(x='reads', y='scaffolds', source=source, size=6)
    plot.line(x='reads', y='scaffolds', source=source)
    plot.title = 'Number of contigs'
    plot.xaxis.axis_label = 'Reads'
    plot.yaxis.axis_label = 'Contigs'

    return plot


def contig_circle(contig_src):
    """ Create contig circle. """
    hover = HoverTool(tooltips=[
                ('Length', '@contigs')])
    hover.point_policy = "follow_mouse"
    plot = figure(x_axis_type=None, y_axis_type=None, tools=[hover])
    plot.annular_wedge(x=0, y=0, inner_radius=0.5, outer_radius=0.7,
                       start_angle='start', end_angle='stop', color='colors',
                       alpha=0.9, source=contig_src)
    plot.title = 'Contig lengths'
    return plot


def calculate_circle(counter):
    total = 2*pi
    contigs = []
    for keys in counter[4]:
        contigs.append(counter[4][keys])
    cum_contig_length = sum(contigs)
    contig_fractions = [float(contig)/cum_contig_length for contig in contigs]
    contig_lengths = [contig * total for contig in contig_fractions]
    x = np.random.random(size=counter[3][-1]) * 100
    y = np.random.random(size=counter[3][-1]) * 100
    colors = [
        "#%02x%02x%02x" % (int(r), int(g), 100) for r, g in zip(50+2*x, 30+2*y)
    ]

    start = []
    stop = []
    start_pos = 0
    total_length = 0
    for i in range(len(contig_lengths)):
        start.append(start_pos)
        start_pos += contig_lengths[i]
        total_length += contig_lengths[i]
        stop.append(total_length)

    circle = [start, stop, colors, contigs]
    return circle


def update(counter):
    """ Stream new data to bokeh-plot.
    """

    circle = calculate_circle(counter)

    new_data = dict(
        reads=[counter[2][-1]],
        scaffolds=[counter[3][-1]],
        n50=[counter[1][-1]])


    contig_new_data = dict(
        start=circle[0],
        stop=circle[1],
        colors=circle[2],
        contigs=circle[3])

    source.stream(new_data)
    contig_src.remove('start')
    contig_src.remove('stop')
    contig_src.remove('colors')
    contig_src.remove('contigs')
    contig_src.add([], name='start')
    contig_src.add([], name='stop')
    contig_src.add([], name='colors')
    contig_src.add([], name='contigs')
    contig_src.stream(contig_new_data)
    print('Update plot')

def update_reads(counter):
    read_new_data = dict(num_reads=[counter[6][-1]],
                    reads_created=[counter[7][-1]])
    read_src.stream(read_new_data)

def stop():
    """ Stop sequencing.
    """
    global completed
    completed = True
    print("Stop sequencing")
    return completed


def parse_arguments():
    """Parse command line arguments.

    Return:
        args: Object with command line arguments.
    """
    parser = argparse.ArgumentParser(description='Genome assembly\
                                                  in real time')
    parser.add_argument('--watch', '-w', required=True,
                        help='Directory to watch for fast5 files')
    parser.add_argument('--run_mode', '-r', default='reads',
                        choices=['time', 'reads'],
                        help='''Use timer or read count.\
                        [reads]''')
    parser.add_argument('--intensity', '-i', default=100,
                        help='''How often the scaffolding process should run.\
                        If run mode is set to reads, scaffolding will run\
                        every i:th read.\
                        If run mode is time, scaffolding will run\
                        every i:th second.\
                        [100 reads]''')
    parser.add_argument('--output', '-o', default='schavott',
                        help='''Set output filename. (Defaut: schavott)''')

    args = parser.parse_args()

    return args


class FastaHandler(PatternMatchingEventHandler):
    patterns = ["*.fasta"]

    def on_created(self, event):
        """ Write files to fasta and scaffold. """
        # while copying
        
        size1 = -1
        while True:
            size = os.path.getsize(event.src_path)
            if size == size1:
                break
            else:
                size1 = os.path.getsize(event.src_path)
                time.sleep(0.1)
        self.write_to_fasta(event)

    def write_to_fasta(self, event):
        """
        """
        global counter
        print(event.src_path)
        # print("In write to fasta function")
        # print('Processing: ' + event.src_path)
        event_time = datetime.datetime.now().time()
        counter[7].append(event_time)
        counter[6].append(counter[6][-1] + 1)
        update_reads(counter)      
        list_of_files.append(event.src_path)
        counter[5].append(counter[5][-1] + 1)
        print('Number of 2D reads (counter):' + str(counter[5][-1]))
        print('Number of 2D reads:' + str(len(list_of_files)))
        if args.run_mode == 'time':
            counter = assembly_time(args, list_of_files,
                                       counter)
        else:
            counter = assembly_reads(args, list_of_files,
                                        counter)

def main():
    """ Main application. """
    global list_of_files
    list_of_files = []
    global args
    args = parse_arguments()
    if args.run_mode == 'time':
        # Must use global timer.
        global tic
        tic = timeit.default_timer()

    # Listen for Fast5 files in dir
    # Setup initial counter
    global counter
    # counter = short_read_assembly(args.contig_file)
    event_time = datetime.datetime.now().time()
    counter = [0, [0], [0], [0], None, [0], [0], [event_time]]

    # start_bokeh_server()
    bokeh_plots(counter)

    # create and start observer
    observer1 = Observer()
    observer1.schedule(FastaHandler(args), path=args.watch)
    observer1.start()

    while True:
        time.sleep(1)
    print('Completed!')
    observer1.stop()
    observer1.join()

if __name__ == '__main__':
    main()
