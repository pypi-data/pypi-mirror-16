# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gcl', [dirname(__file__)])
        except ImportError:
            import _gcl
            return _gcl
        if fp is not None:
            try:
                _mod = imp.load_module('_gcl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gcl = swig_import_helper()
    del swig_import_helper
else:
    import _gcl
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Constants(_object):
    """Proxy of C++ Constants class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constants, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constants, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    cm = _gcl.Constants_cm
    gram = _gcl.Constants_gram
    second = _gcl.Constants_second
    erg = _gcl.Constants_erg
    kelvin = _gcl.Constants_kelvin
    radian = _gcl.Constants_radian
    giga = _gcl.Constants_giga
    mega = _gcl.Constants_mega
    kilo = _gcl.Constants_kilo
    centi = _gcl.Constants_centi
    milli = _gcl.Constants_milli
    micro = _gcl.Constants_micro
    nano = _gcl.Constants_nano
    pico = _gcl.Constants_pico
    h_planck = _gcl.Constants_h_planck
    h_bar = _gcl.Constants_h_bar
    c_light = _gcl.Constants_c_light
    k_b = _gcl.Constants_k_b
    m_p = _gcl.Constants_m_p
    m_e = _gcl.Constants_m_e
    q_e = _gcl.Constants_q_e
    G = _gcl.Constants_G
    eV = _gcl.Constants_eV
    N_a = _gcl.Constants_N_a
    sigma_sb = _gcl.Constants_sigma_sb
    a_rad = _gcl.Constants_a_rad
    sigma_T = _gcl.Constants_sigma_T
    T_cmb = _gcl.Constants_T_cmb
    H_0 = _gcl.Constants_H_0
    a_0 = _gcl.Constants_a_0
    km = _gcl.Constants_km
    meter = _gcl.Constants_meter
    inch = _gcl.Constants_inch
    mm = _gcl.Constants_mm
    micron = _gcl.Constants_micron
    angstrom = _gcl.Constants_angstrom
    jansky = _gcl.Constants_jansky
    barn = _gcl.Constants_barn
    joule = _gcl.Constants_joule
    watt = _gcl.Constants_watt
    rydberg = _gcl.Constants_rydberg
    au = _gcl.Constants_au
    degree = _gcl.Constants_degree
    arcminute = _gcl.Constants_arcminute
    arcsecond = _gcl.Constants_arcsecond
    parsec = _gcl.Constants_parsec
    minute = _gcl.Constants_minute
    hour = _gcl.Constants_hour
    day = _gcl.Constants_day
    year = _gcl.Constants_year
    Mpc = _gcl.Constants_Mpc
    lyr = _gcl.Constants_lyr
    L_sun = _gcl.Constants_L_sun
    M_sun = _gcl.Constants_M_sun
    R_sun = _gcl.Constants_R_sun
    T_sun = _gcl.Constants_T_sun
    M_earth = _gcl.Constants_M_earth
    R_earth = _gcl.Constants_R_earth
    M_jupiter = _gcl.Constants_M_jupiter
    R_jupiter = _gcl.Constants_R_jupiter
Constants_swigregister = _gcl.Constants_swigregister
Constants_swigregister(Constants)

class Engine(_object):
    """Proxy of C++ Engine class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Engine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Engine, name)
    __repr__ = _swig_repr
    TT = _gcl.Engine_TT
    EE = _gcl.Engine_EE
    TE = _gcl.Engine_TE
    BB = _gcl.Engine_BB
    PP = _gcl.Engine_PP
    TP = _gcl.Engine_TP
    EP = _gcl.Engine_EP

    def __init__(self):
        """__init__(Engine self) -> Engine"""
        this = _gcl.new_Engine()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _gcl.delete_Engine
    __del__ = lambda self: None

    def GetCls(self, lVec, cltt, clte, clee, clbb):
        """GetCls(Engine self, std::vector< unsigned int > const & lVec, parray & cltt, parray & clte, parray & clee, parray & clbb) -> int"""
        return _gcl.Engine_GetCls(self, lVec, cltt, clte, clee, clbb)


    def GetLensing(self, lVec, clpp, cltp, clep):
        """GetLensing(Engine self, std::vector< unsigned int > const & lVec, parray & clpp, parray & cltp, parray & clep) -> int"""
        return _gcl.Engine_GetLensing(self, lVec, clpp, cltp, clep)


    def GetPklin(self, z, arg3):
        """GetPklin(Engine self, double z, double arg3) -> double"""
        return _gcl.Engine_GetPklin(self, z, arg3)


    def GetPknl(self, z, k):
        """GetPknl(Engine self, double z, double k) -> double"""
        return _gcl.Engine_GetPknl(self, z, k)


    def GetTk(self, z, k, Tk):
        """GetTk(Engine self, double z, parray const & k, parray & Tk) -> int"""
        return _gcl.Engine_GetTk(self, z, k, Tk)


    def WriteCls(self, o):
        """WriteCls(Engine self, std::ostream & o)"""
        return _gcl.Engine_WriteCls(self, o)


    def WriteTk(self, of, z):
        """WriteTk(Engine self, std::ostream & of, double z)"""
        return _gcl.Engine_WriteTk(self, of, z)


    def lmax(self):
        """lmax(Engine self) -> int"""
        return _gcl.Engine_lmax(self)

Engine_swigregister = _gcl.Engine_swigregister
Engine_swigregister(Engine)

class ClassParams(_object):
    """Proxy of C++ ClassParams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassParams, name)
    __repr__ = _swig_repr

    def __init__(self, param_file):
        """__init__(ClassParams self, std::string const & param_file) -> ClassParams"""
        this = _gcl.new_ClassParams(param_file)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Update(self, *args):
        """
        Update(ClassParams self, std::string const & key, int const & val) -> int
        Update(ClassParams self, std::string const & key, float const & val) -> int
        Update(ClassParams self, std::string const & key, double const & val) -> int
        Update(ClassParams self, std::string const & key, bool const & val) -> int
        Update(ClassParams self, std::string const & key, std::string const & val) -> int
        Update(ClassParams self, std::string const & key, char const * val) -> int
        """
        return _gcl.ClassParams_Update(self, *args)


    def Print(self):
        """Print(ClassParams self)"""
        return _gcl.ClassParams_Print(self)


    def size(self):
        """size(ClassParams self) -> unsigned int"""
        return _gcl.ClassParams_size(self)


    def value(self, key):
        """value(ClassParams self, std::string const & key) -> std::string const &"""
        return _gcl.ClassParams_value(self, key)


    def __getitem__(self, key):
        """__getitem__(ClassParams self, std::string const & key) -> std::string"""
        return _gcl.ClassParams___getitem__(self, key)

    __swig_destroy__ = _gcl.delete_ClassParams
    __del__ = lambda self: None
ClassParams_swigregister = _gcl.ClassParams_swigregister
ClassParams_swigregister(ClassParams)

# This file is compatible with both classic and new-style classes.


