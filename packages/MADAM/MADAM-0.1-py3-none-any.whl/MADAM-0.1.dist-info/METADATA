Metadata-Version: 2.0
Name: MADAM
Version: 0.1
Summary: Digital asset management library
Home-page: https://github.com/eseifert/madam
Author: Michael Seifert, Erich Seifert
Author-email: mseifert@error-reports.org, dev@erichseifert.de
License: AGPLv3
Keywords: asset media processing
Platform: POSIX
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python
Classifier: Topic :: Multimedia :: Graphics :: Graphics Conversion
Classifier: Topic :: Multimedia :: Sound/Audio :: Conversion
Classifier: Topic :: Multimedia :: Video :: Conversion
Classifier: License :: OSI Approved :: GNU Affero General Public License v3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Requires-Dist: bidict
Requires-Dist: frozendict
Requires-Dist: mutagen
Requires-Dist: piexif
Requires-Dist: pillow
Provides-Extra: doc
Requires-Dist: sphinx (>=1.3); extra == 'doc'
Requires-Dist: sphinx-rtd-theme; extra == 'doc'

MADAM
#####

Multimedia Advanced Digital Asset Management

|travis-badge|_ |coveralls-badge|_

.. |travis-badge| image:: https://api.travis-ci.org/eseifert/madam.svg?branch=master
.. _travis-badge: https://travis-ci.org/eseifert/madam
.. |coveralls-badge| image:: https://coveralls.io/repos/github/eseifert/madam/badge.svg?branch=master
.. _coveralls-badge: https://coveralls.io/github/eseifert/madam?branch=master

MADAM is a digital asset management library. It aims to facilitate the handling
of image, audio, and video files by helping out with several tasks, like
storing, organizing, and transforming asset data.

Usage
=====

Reading a JPEG image and extracting metadata:

.. code:: pycon

    >>> with open('path/to/file.jpg', 'rb') as file:
    ...     asset = madam.read(file)
    >>> asset.mime_type
    'image/jpeg'

Changing the size of an image asset:

.. code:: pycon

    >>> asset.width
    800
    >>> asset.height
    600
    >>> make_thumbnail = pillow_processor.resize(width=100, height=100)
    >>> resized_asset = make_thumbnail(asset)
    >>> resized_asset.width
    100
    >>> resized_asset.height
    100

Converting an image to a different file format and saving it to a file:

.. code:: pycon

    >>> convert_to_png = pillow_processor.convert(mime_type='image/png')
    >>> png_asset = convert_to_png(asset)
    >>> with open('path/to/file.png', 'wb') as file:
    ...     madam.write(png_asset, file)


