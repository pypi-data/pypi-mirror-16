#!/usr/bin/env python3

__author__ = "MyrikLD"
__version__ = "1.0.0"
__email__ = "myrik260138@tut.by"
__license__ = "GPLv3"

"""
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""


class ModA:
	# L = 1, E = 2, S = 3, I = 4
	types = [
		None,
		[4, -1, 3, -2, -3, 2, -4, 1],
		[-3, 2, -4, 1, 4, -1, 3, -2],
		[2, -3, 1, -4, -1, 4, -2, 3],
		[-1, 4, -2, 3, 2, -3, 1, -4],

		[2, -4, 1, -3, -1, 3, -2, 4],
		[-1, 3, -2, 4, 2, -4, 4, -3],
		[3, -1, 4, -2, -4, 2, -3, 1],
		[-4, 2, -3, 1, 3, -1, 4, -2],

		[3, -2, 4, -1, -4, 1, -3, 2],
		[-4, 1, -3, 2, 3, -2, 4, -1],
		[1, -4, 2, -3, -2, 3, -1, 4],
		[-2, 3, -1, 4, 1, -4, 2, -3],

		[1, -3, 2, -4, -2, 4, -1, 3],
		[-2, 4, -1, 3, 1, -3, 2, -4],
		[4, -2, 3, -1, -3, 1, -4, 2],
		[-3, 1, 2, -4, 4, -2, 3, -1]
	]
	funs = [
		"Базовая",
		"Творческая",
		"Ролевая",
		"Болевая",
		"Суггестивная",
		"Активационная",
		"Ограничительная",
		"Фоновая"
	]
	funs_txt = [
		"Определяет смысл жизни и программу действий носителя социотипа",
		"Определяет механизм деятельности и способ реализации программной функции",
		"По ней человек обычно старается показать себя компетентным, но разрешать сложные ситуации и долго работать в режиме этой функции человеку сложно",
		"Место наименьшего сопротивления, по болевой функции человек болезненно воспринимает информацию и нуждается в тактичной помощи",
		'По ней человек воспринимает информацию некритично и с благодарностью, нуждается в помощи и советах. В то же время, человек плохо осознаёт свои потребности по данной функции вплоть до возникновения конкретных проблем — "чего-то хочется, а чего конкретно — непонятно".',
		"По ней человек ориентируется на ближайшее окружение, положительно реагирует на воздействие.",
		"По этой функции человек хорошо воспринимает и обрабатывает информацию, но предпочитает скорее критиковать ошибки других по данной функции, чем самому проявлять по ней инициативу.",
		"Обычно проявляется без слов на деле, органично и естественно, без лишних объяснений."
	]
	params = {
		-4: "Интуиция времени",
		-3: "Сенсорика ощущений",
		-2: "Этика отношений",
		-1: "Структурная логика",
		1: "Деловая логика",
		2: "Этика эмоций",
		3: "Силовая сенсорика",
		4: "Интуиция возможностей"
	}
	params_txt = {
		-4: 'Предсказание того, как мир может воздействовать на тебя',
		-3: 'Умение с комфортом подстроиться в окружающее пространство',
		-2: 'Четкое понимание "хорошо/плохо", "правильно/неправильно"',
		-1: 'Умение получать удовольствие от структурирования информации "для красоты"',
		1: 'Умение извлекать выгоду',
		2: 'Погружение в эмоции с головой',
		3: 'Умение влиять и менять под себя окружающее пространство',
		4: 'Предсказание того, как ты можешь воздействовать на мир'
	}

	def js(self):
		a = ""
		a += "types : " + str(self.types) + ","
		a += "funs : " + str(self.funs) + ","
		a += "funs_txt : " + str(self.funs_txt) + ","

		a += "params : {"
		for i, j in self.params.items():
			a += "'" + str(i) + "':'" + j + "', "
		a += "},"
		a += "params_txt : {"
		for i, j in self.params_txt.items():
			a += "'" + str(i) + "':'" + j + "', "
		a += "}"
		return a


class Sociodb:
	types = {'ENTP': 1, 'ISFP': 2, 'ESFJ': 3, 'INTJ': 4,
		'ENFJ': 5, 'ISTJ': 6, 'ESTP': 7, 'INFP': 8,
		'ESFP': 9, 'INTP': 10, 'ENTJ': 11, 'ISFJ': 12,
		'ESTJ': 13, 'INFJ': 14, 'ENFP': 15, 'ISTP': 16
	}

	names = [
		["Неизвестно", "Дон", "Дюма", "Гюго", "Роб", "Гам", "Макс", "Жук", "Еся", "Нап", "Баль", "Джек", "Драй", "Штир",
			"Дост", "Гек", "Габ"],
		["Неизвестно", "Дон Кихот", "Дюма", "Гюго", "Робеспьер",
			"Гамлет", "Максим Горький", "Жуков", "Есенин",
			"Наполеон", "Бальзак", "Джек Лондон", "Драйзер",
			"Штирлиц", "Достоевский", "Гексли", "Габен"],
		["Неизвестно", "Искатель", "Посредник", "Энтузиаст", "Аналитик", "Наставник", "Инспектор", "Маршал", "Лирик",
			"Политик", "Критик", "Предприниматель", "Хранитель", "Администратор", "Гуманист", "Советчик", "Мастер"],
		["Неизвестно", "ИЛЭ", "СЭИ", "ЭСЭ", "ЛИИ", "ЭИЭ", "ЛСИ", "СЛЭ", "ИЭИ", "СЭЭ", "ИЛИ", "ИЛЭ", "ЭСИ", "ЛСЭ", "ЭИИ",
			"ИЭЭ", "СЛИ"],
		["Неизвестно", "ENTP", "ISFP", "ESFJ", "INTJ", "ENFJ", "ISTJ", "ESTP", "INFP", "ESFP", "INTP", "ENTJ", "ISFJ",
			"ESTJ", "INFJ", "ENFP", "ISTP"],
		["Неизвестно", "Интуитивно-Логический Экстраверт", "Сенсорно-Этический Интроверт",
			"Этико-Сенсорный Экстраверт", "Логико-Интуитивный Интроверт",
			"Этико-Интуитивный Экстраверт", "Логико-Сенсорный Интроверт",
			"Сенсорно-Логический Экстраверт", "Интуитивно-Этический Интроверт",
			"Сенсорно-Этический Экстраверт", "Интуитивно-Логический Интроверт",
			"Логико-Интуитивный Экстраверт", "Этико-Сенсорный Интроверт",
			"Логико-Сенсорный Экстраверт", "Этико-Интуитивный Интроверт",
			"Интуитивно-Этический Экстраверт", "Сенсорно-Логический Интроверт"],
	]

	otn = ["Неизвестно", "Тождественные", "Квазитождество", "Родственные", "Исполнитель", "Деловые", "Заказчик",
		"Суперэго", "Активация", "Противоположность", "Зеркальные", "Миражные", "Ревизор", "Полудуальные",
		"Подревизный", "Дуальные", "Конфликтные"]

	quad = ["Неизвестно", "Альфа", "Бета", "Гамма", "Дельта"]
	text = [
		[
			"Неизвестно",
			"Быть неординарным человеком. Завоевать славу. Быть лучше, чем все остальные: добрей, умней, красивей.",
			"Борьба ради общего дела и успеха. Осознание собственной величины. ",
			"Победа любой ценой! Проломить любое сопротивление!",
			"Быть нужным и полезным. Очень любят всех учить: как жить, как работать, как налаживать отношения с людьми и так далее и тому подобное."
		],
		[
			"Неизвестно",
			"<i>Структурная логика</i> для <i>интуиции возможностей</i>.",
			"<i>Этика эмоций</i> для <i>сенсорики ощущений</i>.",
			"<i>Сенсорика ощущений</i> для <i>этики эмоций</i>.",
			"<i>Интуиция возможностей</i> для <i>структурной логики</i>.",

			"<i>Интуиция времени</i> для <i>этики эмоций</i>.",
			"<i>Волевая сенсорика</i> для <i>структурной логики</i>.",
			"<i>Структурная логика</i> для <i>волевой сенсорики</i>.",
			"<i>Этика эмоций</i> для <i>интуиции времени</i>.",

			"<i>Этика отношений</i> для <i>волевой сенсорики</i>.",
			"<i>Деловая логика</i> для <i>интуиции времени</i>.",
			"<i>Интуиция времени</i> для <i>деловой логики</i>.",
			"<i>Волевая сенсорика</i> для <i>этики отношений</i>.",

			"<i>Сенсорика ощущений</i> для <i>деловой логики</i>.",
			"<i>Интуиция возможностей</i> для <i>этики отношений</i>.",
			"<i>Этика отношений</i> для <i>интуиции возможностей</i>.",
			"<i>Деловая логика</i> для <i>сенсорики ощущений</i>."],
		[
			"Неизвестно",
			"Такой базовый блок позволяет хорошо объяснять и использовать логику для поиска новых возможностей. Искать объяснения, чтобы понять и показать другим суть предмета. Такой человек может удачно и легко генерировать идеи. А для их продвижения используется структурная логика – структурирование, объяснение их другим. ЧИ+БЛ внимательны, своим логическим мышлением могут постоянно искать новое. Умеют выйти за рамки ограничений (как в науке, так в социуме), норм, проявить свою уникальность.",
			"Самый широкий и чистый канал восприятия у Дюмы – сенсорика ощущений, первое, что приходит на ум, что имеет значение – физические ощущения. Такой человек умеет стремиться к уюту и комфорту, неторопливости, сохранению здоровья и красоты, знает в этом толк. Чаще не любит боль, напряжение. Основной инструмент для осуществления всего этого – эмоции. Могут кокетничать ради того, чтобы получить помощь с целью обеспечения комфорта. Умеют создать радостную атмосферу, чтобы в ней можно было расслабиться. Могут экспериментировать с интенсивностью и многообразием эмоций, чтобы задать нужную обстановку в своем пространстве.",
			"Самый широкий и чистый канал воспринимает информацию об эмоциональном фоне, веселье, радости. Такие люди могут хорошо уметь устраивать праздники, сборища, возможно с разнообразием вкусной еды. Умеют хорошо одеваться, хорошо выглядеть, умеют привлекать внимание. Для них может быть важно вызывать к себе уважение и хорошее отношение. А какой инструмент для этого? Сенсорика ощущений. «Создам комфорт и всем будет весело. Буду красиво выглядеть и все меня будут любить.» Умеют экспериментировать в области сенсорики ощущений, в зависимости от того, какой создается эмоциональный фон.",
			"Умеют использовать возможности, новые и разные, для поддержания некоторой логической концепции. Умеют глубоко понять суть предмета, разобраться в нем, тогда предмет вписывается в систему, через призму которой базовый блок БЛ+ЧИ воспринимает мир. Умеют любое событие, любое ощущение, чувство объяснить, вписать в определенную логическую концепцию.",

			"Умеют чувствовать эмоциональное состояние объекта и то, как и когда влиять эмоционально. В какое время отыграть соответствующую роль. Умеет отыгрывать одну и ту же роль с разной эмоциональной окраской. Базовый блок позволяет подстраивать ситуацию и подстраиваться под нее так, чтобы проявить именно те эмоции, которые нужны для достижения желаемой цели, и выбирать для этого идеальный момент. Также вызвать уважение и отношение к себе. Базовый блок хочет находиться в нужном эмоциональном состоянии в подходящее время. Умеет выбрать идеальный момент для эмоционального воздействия.",
			"Такой базовый блок позволяет его обладателю хорошо разбираться в том, как хранить порядок, как закреплять законы и правила и контролировать их выполнение. Такой базовый блок дает восприятие всего вокруг, словно некой структуры, статичной картинки, где все объекты связаны иерархически. И не позволяет этому восприятию лишний раз меняться. Умеет отслеживать выполнение планов точно, как требуется. Умеет уверенно настаивать на своем там, где это касается важных убеждений и правил.",
			"Такой блок позволяет структурировать пространство, создавать иерархии, командовать и заставлять других функционировать в своих целях. Умеет ставить стратегические задачи. Определять оптимальную ему расстановку сил, располагая других участников каждого в своей ячейке. Человек умеет объяснить любую возникшую ситуацию. Переупорядочить ее нужным образом. Задача блока – утвердить свою уверенность, свой статус, положение.",
			"Умеет чувствовать любое мельчайшее изменение. Особенно – изменение в настроениях себя и людей. Умеет обращать внимание на события и чувствовать, как они будут развиваться дальше. Разбирается в тенденциях развития событий, умеет хранить память о том, что дорого (особенно, что было дорого). Умеет проявлять капризность в своих целях. С помощью эмоций, формируя нужное отношение к себе, может тонко манипулировать людьми и ситуацией. Создают фон, при котором события воспринимаются нужным образом. Важные изменения умеют подсвечиваться неким оттенком эмоций. Эмоциональным фоном может создаваться наиболее удачная и гармоничная обстановка. Может быть интересно экспериментировать с интенсивностью эмоций.",

			"Базовый блок работает так, что отношение человека к другим или к объектам умеет меняться и проявляться в том виде, а который для ситуации оптимален. Базовый блок направлен на получение власти над ситуацией, увеличение уверенности в ней. Человек умеет быть уверенным, чувствовать свою значимость, свой (и не только) статус. С помощью этики и своим отношением к окружающему миру умеет формировать ситуацию так, как требуется.",
			"Здесь основная функция подразумевает наблюдение. Умеют смотреть за ходом событий, отслеживать изменения. И в нужный момент лишь включать свой инструмент – деловую логику, быстро и эффективно что-то сделать, получить требуемую пользу. Они терпеливо умеют наблюдать, дожидаясь того единственного момента, участие в котором принесет оптимальную пользу. Результат которой пойдет на обеспечение дальнейшего ожидания.",
			"Время для дел. Самое ясное в восприятии такого блока – дела, действия, потоки активности. Эффективность действий. Что бы ни происходило, умеют разобраться в ситуации, в том, как извлечь пользу и куда двигаться дальше, как решать проблемы. Инструмент – интуитивное мышление, планирование, умение видеть развитие событий в будущем и в соответствии с этим распределять дела. Человек может хорошо чувствовать время, например, сколько времени уйдет на какие дела, планировать. Чем закончится тот или иной процесс, имеет ли он перспективы, какие перспективы нужны. Могут экспериментировать с организацией и планированием рабочего процесса для получения оптимального результата.",
			"Базовый блок работает на сохранение отношений. В частности, своего отношения к объектам. Если у человека есть определенное отношение к человеку ли к ситуации или к коллективу, то усилия волевой сенсорики умеют быть направленными на то, чтобы это отношение не менялось. Умеют влиять на людей, отстаивать свою позицию, своей уверенностью закрепляя свои моральные принципы. Могут определять и хранить дистанцию между собой и людьми такую, чтобы к ним было определенное отношение.",

			"Базовый блок дает способность детально и качественно выполнять свою работу, к любым процессам подходить внимательно, изучать кропотливо с целью обеспечения эффективной деятельности. Умеет заниматься детальной проработкой планов. Умеет создать комфортные условия для работы, любой деятельности. А также – оказывать заботу с целью благополучной жизни. Такой базовый блок позволяет внимательно и подробно разобраться в волнующей проблеме. Обладатель умеет быть самостоятельным, осмотрительным. Может разобраться в технологических процессах, как и что где устроено, как нужно организовать процесс. Починить что-либо, чтобы работало, как нужно. Комфорт и аккуратность обеспечиваются для поддержания дел и процессов.",
			"Базовый блок БЭ+ЧИ работает на создание отношений и сохранение отношений с помощью разных возможностей. Дает глубокое понимание сути отношений между людьми, этических норм. Человек умеет искать новые возможности для сохранения своей этической картины мира. Умеет абстрагироваться от внешнего мира, если отношения с последним не устраивают. Может найти способ относиться к другим так, как полагает система ценностей конкретного обладателя. Если отношения вокруг складываются не так, как хочется, программа ТИМа найдет способ уйти от этих отношений, избежать ненужных столкновений. Может видеть разные способы подходы к людям. Разные возможности установления контактов между людьми. Умеют оправдывать поступки других людей для сохранения прежнего отношения к ним. Либо ищут способ отстраниться абстрагироваться.",
			"Базовый блок Гексли работает на поиск и открытие новых возможностей. Могут налаживать разные контакты, строить отношения с разными людьми. Отношение к другим может меняться в зависимости от ситуации. Человеку интересны новые возможности. С помощью контакта с людьми, коллективами — расширяют свое мировоззрение, ищут новые интересы, идеи. Базовый блок требует разнообразного, нового общения. Базовый блок позволяет экспериментировать в отношениях с людьми, гибко используя разную тактику в разных ситуациях. Чувствует другого человека, и может выстраивать с ним самые разные отношения.",
			"Дела, работа, обеспечение эффективности для создания максимально комфортной обстановки для себя и близкого окружения. Такой базовый блок дает умение создавать комфорт своими действиями. Может умело работать с техникой. Умеет быть аккуратным, рациональным. Хорошо чувствует обстановку вокруг, пространство. Умеет рационально решать финансовые и бытовые вопросы. Технологии, техники умеют использоваться для обеспечения комфорта. Базовый блок работает на сохранение и улучшение физических ощущений, ощущения комфорта. При желании его обладателя, умеет следить за внешностью, выглядеть красиво (по критериям обладателя), не особо напрягаясь, а уместными рациональными действиями. Умеет найти способ обеспечить себе максимум комфорта за счет рационального расходования сил и средств."
		]
	]

	def num(self, t):
		return self.types.get(t, 0)

	def name(self, num, stype):
		if type(stype) is str:
			stype = self.num(stype)
		if not 1 <= t <= 16:
			raise ("Type num error")
		return self.names[num - 1][stype]

	def quad_num(self, t):
		if type(t) == str:
			t = self.types.get(t, 0)
		return int((t - 1) / 4 + 1)

	def bin(self, t):
		if type(t) == str:
			t = self.types.get(t, 0)
		if not 1 <= self.stype <= 16:
			raise ("Type num error")
		a = self.names[4][self.stype]

		b = [];
		b.append(1 if a[0] == 'E' else 0)
		b.append(1 if a[1] == 'N' else 0)
		b.append(1 if a[2] == 'T' else 0)
		b.append(1 if a[3] == 'P' else 0)
		return b;


class Stype:
	db = Sociodb()
	_raw = [0, 0, 0, 0]

	def __init__(self, t):
		if type(t) == int:
			if not 1 <= t <= 16:
				raise ("Type num error")
			self.stype = t
			p = self.db.names[4][t]
		elif type(t) == str:
			p = t.upper()
			self.stype = self.db.types[p]
		else:
			raise ("Type name error")

		self._raw[0] = p[0]
		self._raw[1] = p[1]
		self._raw[2] = p[2]
		self._raw[3] = p[3]

	def set(self, t):
		if type(t) == int:
			if not 1 <= t <= 16:
				raise ("Type num error")
			self.stype = t
			p = self.db.names[4][t]
		elif type(t) == str:
			p = t.upper()
			self.stype = self.db.types[p]
		else:
			raise ("Type name error")

		self._raw[0] = p[0]
		self._raw[1] = p[1]
		self._raw[2] = p[2]
		self._raw[3] = p[3]

	def name(self, num=4):
		return self.db.names[num][self.stype]

	def quad(self, p=0):
		if self.stype == 0 or self.stype == None:
			return 0
		q = int((self.stype - 1) / 4 + 1)
		if p != 0:
			q = (q + p - 1) % 4 + 1
		return q

	def bin(self, inp=None):
		if inp is None:
			if not 1 <= self.stype <= 16:
				raise ("Type num error")
			a = self.name(4)
			b = [0, 0, 0, 0]
			b[3] = 1 if a[0] == 'E' else 0
			b[2] = 1 if a[1] == 'N' else 0
			b[1] = 1 if a[2] == 'T' else 0
			b[0] = 1 if a[3] == 'P' else 0
			return b
		else:
			s = ""
			s += 'E' if inp[0]==0 else 'I'
			s += 'N' if inp[1]==0 else 'S'
			s += 'T' if inp[2]==0 else 'F'
			s += 'P' if inp[3]==0 else 'J'
			self.set(s)
			return self

	def otn(self, p):
		if type(p) == str:
			p = Stype(p)
		a = self.bin()
		b = p.bin()

		if (a[3]):
			if (self.quad(1) == p.quad() or self.quad(-1) == p.quad()):
				a[1] = not a[1]
				a[2] = not a[2]

		d = 0
		for i in range(4):
			d |= (a[i] != b[i]) << i
		x = d
		d += 1
		r = 0
		# Magic, dont touch
		if ((x & 9) == 9):
			if ((x & 6) != 6 and (x & 6)):
				if ((6 & x) == 2):
					a[1] = not a[1]
					r = a[1] ^ a[2]
				elif ((6 & x) == 4):
					r = a[2] ^ a[1]
				d = 14 if r else 12
		else:
			if ((x & 9) == 1):
				if ((x & 6) != 6 or (x & 6)):
					if ((6 & x) == 2):
						a[1] = not a[1]
						r = a[1] ^ a[2]
					elif ((6 & x) == 4):
						r = a[2] ^ a[1]
					d = 6 if r else 4
		return d

	def __add__(self, other):
		if type(other) == Stype:
			return self.otn(other)
		if type(other) == str:
			b = Stype(other)
			return self.otn(other)


def selftest():
	a = Stype("ENTP")
	rez = [1, 15, 4, 10, 4, 14, 3, 13, 7, 9, 4, 16, 6, 12, 5, 11]
	for i, name in enumerate(a.db.names[4][1:]):
		assert a + name == rez[i]
	assert Stype("ENTP").bin(Stype("INFP").bin()).name() == "INFP"


selftest()
