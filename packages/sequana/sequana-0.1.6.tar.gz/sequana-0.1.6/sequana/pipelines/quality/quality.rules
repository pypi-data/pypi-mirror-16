from sequana import snaketools as sm
sm.init("quality.rules", globals())

# This must be defined before the include 
expected_output = []

# ========================================= Include Phix pipeline

include: sm.modules['phix_removal']

trimming = cfg.config.trimming

# ========================================== Include the trimming tool

# Include the cutadapt module or the skewer module
if trimming not in ['cutadapt', "skewer"]:
    raise ValueError("trimming must be either cutadapt or skewer. Change the config file")

if trimming == "cutadapt":
    include: sm.modules[trimming]
    expected_output += __cutadapt__output
    include: fastqc_dynamic(trimming, __cutadapt__output)
    include: fastq_stats_dynamic(trimming, __cutadapt__output)
    expected_output += ['fastqc_cutadapt/fastqc.done']
    expected_output += ['fastq_stats_cutadapt/fastq_stats.done']
elif trimming == "skewer":
    include: sm.modules[trimming]
    expected_output += __skewer__output
    include: fastqc_dynamic(trimming, __skewer__output)
    include: fastq_stats_dynamic(trimming, __skewer__output)
    expected_output += ['fastqc_skewer/fastqc.done']
    expected_output += ['fastq_stats_skewer/fastq_stats.done']


# ======================================= The reports

rule pipeline_quality:
    input:
        "report/report_phix_removal.html",
        expected_output,
    output:
        # Used by other workflow that uses this workflow
        touch("logs/pipeline_quality.done")
    run:
        from sequana import report_fastqc
        from sequana import report_fastq_stats
        if trimming == "cutadapt":
            from sequana import report_cutadapt
            s = report_cutadapt.CutAdaptReport(directory="report")
            s.read_data("logs/{0}.txt".format(trimming))
            s.create_report()
        elif trimming == "skewer":
            from sequana import report_skewer
            s = report_skewer.Skewer(directory="report")
            s.read_data("logs/{0}.txt".format(trimming))
            s.create_report()

        # Now, the missing FastQC
        s = report_fastqc.FastQCReport(
                  "fastqc_{0}".format(trimming),
                  output_filename="fastqc__{0}.html".format(trimming),
                  directory="report")
        s.jinja['main_link'] = 'report_phix_removal.html'
        s.create_report()

        # And the missing FastQ
        s = report_fastq_stats.FastQStatsReport(
            "fastq_stats_{0}".format(trimming),
            output_filename="fastq_stats__{0}.html".format(trimming),
            directory="report")
        s.jinja['main_link'] = 'report_phix_removal.html'
        s.create_report()

        shell('ln -sf report_phix_removal.html report/pipeline_quality.html')

onsuccess:
    sm.plot_stats()



