"""Phix removal pipeline

Author: Thomas Cokelaer
Affiliation: Institut Pasteur @ 2016

This pipeline is part of Sequana software (sequana.readthedocs.io)
"""

import sequana
from sequana import snaketools as sm
from sequana.snaketools import SequanaConfig, FileFactory
sm.init("phix_removal.rules", globals())



# This must be defined before the include 
configfile: "config.yaml"
cfg = SequanaConfig(config)


# Optional for testing
if config['fastq_sampling']['do']:
    include: sm.modules['fastq_sampling']
    FILE1 = cfg.BASENAME[0]
    config['samples']['file1'] = "fastq_sampling/%s" % FILE1
    if cfg.paired:
        FILE2 = cfg.BASENAME[1]
        config['samples']['file2'] = "fastq_sampling/%s" % FILE2
else:
    sm.message(cfg.BASENAME[0])
    rule data_input:
        input : expand("{dataset}" , dataset=cfg.BASENAME)
    rule data:
        """Select a sample from raw FastQ files"""
        input:
        output: "{dataset}"


# Generic include of some dynamic modules
exec(open(sequana.modules["bwa_mem_dynamic"], "r").read())
exec(open(sequana.modules["fastqc"], "r").read())
exec(open(sequana.modules["fastq_stats"], "r").read())

# fastqc and fastq_stats on the samples
include: fastqc_dynamic("samples", cfg.DATASET)
include: fastq_stats_dynamic("samples", cfg.DATASET)


if cfg.config.bwa_phix.do:
    include: bwa_mem_dynamic("phix", cfg.DATASET)
    # This will create the mapped and unmapped data in bwa_phix directory
    include: sm.modules['bwa_bam_to_fastq']

    # Run a fastqc and fastq_stats on the data without phix
    include: fastqc_dynamic("phix", __bwa_bam_to_fastq__output)
    include: fastq_stats_dynamic("phix", __bwa_bam_to_fastq__output)


# Those rules takes a couple of seconds so no need for a cluster
include: sm.modules['dag']     # Create DAG file
include: sm.modules['conda']   # Create requirements.txt(dependencies)
localrules: dag, conda


expected_output += ["fastqc__samples/fastqc.done"]
expected_output += ["fastq_stats__samples/fastq_stats.done"]
expected_output += ["report/dag.svg"]
expected_output += ["report/requirements.txt"]


# Phix may be set off in the config
if cfg.config.bwa_phix.do:
    expected_output += ["fastqc__phix/fastqc.done"]
    expected_output += ["fastq_stats__phix/fastq_stats.done"]


rule pipeline_phix_removal:
    input: expected_output
    output: touch('logs/pipeline_phix_removal.done')


onsuccess:
    shell("cp %s %s/" % (__snakefile__, "report"))
    shell("cp config.yaml %s/" % "report")
    sm.plot_stats()
    from sequana import SequanaSummary
    ss = SequanaSummary("report", "summary.html", snakefile=__snakefile__)
    ss.create_report()
    sm.plot_stats()

onerror:
    print("An error occurred. See message above.")





