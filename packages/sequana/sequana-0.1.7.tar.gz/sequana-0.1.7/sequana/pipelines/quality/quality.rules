from sequana import snaketools as sm
sm.init("quality.rules", globals())


# ========================================= Include Phix pipeline

include: sm.modules['phix_removal']


do_adapter_removal = cfg.config.adapter_removal.do

# reset expected output for the pipeline quality
expected_output = []

if do_adapter_removal:
    adapter_removal = cfg.config.adapter_removal.tool
    trimming = adapter_removal
    if adapter_removal not in ['cutadapt', "skewer"]:
        raise ValueError("trimming must be either cutadapt or skewer. Change the config file")

    if adapter_removal == "cutadapt":
        include: sm.modules[trimming]
        include: fastqc_dynamic(trimming, __cutadapt__output)
        include: fastq_stats_dynamic(trimming, __cutadapt__output)
        expected_output += ['fastqc__cutadapt/fastqc.done']
        expected_output += ['fastq_stats__cutadapt/fastq_stats.done']
    elif adapter_removal == "skewer":
        include: sm.modules[trimming]
        include: fastqc_dynamic(trimming, __skewer__output)
        include: fastq_stats_dynamic(trimming, __skewer__output)
        expected_output += ['fastqc__skewer/fastqc.done']
        expected_output += ['fastq_stats__skewer/fastq_stats.done']


# ======================================= The reports

expected_output.append("logs/pipeline_phix_removal.done")

rule pipeline_quality:
    input:
        expected_output,
    output:
        # Used by other workflow that uses this workflow
        touch("logs/pipeline_quality.done")
    run:
        from sequana.reports import report_fastqc
        from sequana.reports import report_fastq_stats
        if do_adapter_removal:
            if adapter_removal == "cutadapt":
                from sequana.reports import report_cutadapt
                s = report_cutadapt.CutAdaptReport(directory="report")
                s.read_data("logs/{0}.txt".format(trimming))
                s.create_report()
            elif adapter_removal == "skewer":
                from sequana.reports import report_skewer
                s = report_skewer.Skewer(directory="report")
                s.read_data("logs/{0}.txt".format(trimming))
                s.create_report()

onsuccess:
    shell("cp %s %s/" % (__snakefile__, "report"))
    shell("cp config.yaml %s/" % "report")
    sm.plot_stats()
    from sequana import SequanaSummary
    ss = SequanaSummary("report", "summary.html", snakefile=__snakefile__)
    # copy all html
    ss.copy_html_to_report("*/*html")
    # copy all images
    ss.copy_html_to_report("*/images/*png" )

    if config['adapter_removal']['do']:
        shell('cp cutadapt/*fastq.gz report/')    
    else:
        raise NotImplementedError

    shell('cp -r fastqc_*/ report')
    shell('rm -f report/*fastqc*.html')
    shell('rm -f report/temp*.html')
    # the summary.html report itself.
    ss.create_report()
