#! /usr/bin/env python3

import argparse
import os
import os.path

from plenum.common.raet import initLocalKeep
from plenum.common.types import CLIENT_STACK_SUFFIX

from sovrin.common.util import getConfig


config = getConfig()
keepDir = os.path.expanduser(config.baseDir)


def initKeep(name, baseDir, pkseed, sigseed, override=False):
    pubkey, verkey = initLocalKeep(name, baseDir, pkseed, sigseed, override)
    print("Public key is", pubkey)
    print("Verification key is", verkey)

if __name__ == "__main__":
    if not os.path.exists(keepDir):
        os.makedirs(keepDir, exist_ok=True)

    parser = argparse.ArgumentParser(
        description="Generate keys for a node's stacks "
                    "by taking the node's name and 2 "
                    "seed values")

    parser.add_argument('--name', required=True, help='node name')
    parser.add_argument('--seeds', required=True, type=str, nargs=2,
                        help='seeds for keypairs')
    parser.add_argument('--force', help='overrides keys', action='store_true')
    args = parser.parse_args()
    # Initialize node stack
    print("For node stack, stack name is", args.name)
    try:
        initKeep(args.name, keepDir, args.seeds[0], args.seeds[1], args.force)
    except Exception as ex:
        print(ex)
        exit()
    # Initialize client stack
    print("For client stack, stack name is", args.name + CLIENT_STACK_SUFFIX)
    try:
        initKeep(args.name + CLIENT_STACK_SUFFIX, keepDir, args.seeds[0],
             args.seeds[1], args.force)
    except Exception as ex:
        print(ex)
        exit()
