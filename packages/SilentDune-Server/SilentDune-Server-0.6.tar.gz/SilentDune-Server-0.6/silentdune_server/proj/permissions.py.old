#
# Authors: Brett Donohoo <brett.donohoo@entpack.com>
#
# Copyright (C) 2015 EntPack
# see file 'LICENSE' for use and warranty information
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from rest_framework import permissions

# TODO: Change to use Django's default Model permissions to check User access for each operation
# https://docs.djangoproject.com/en/dev/topics/auth/default/#default-permissions

class RulePermissions(permissions.BasePermission):
    """
    Handles permissions for rules.  The basic rules are

     - owner may GET, PUT, POST, DELETE
     - nobody else can access
     """

    def has_object_permission(self, request, view, obj):
        return True


class RingPermissions(permissions.BasePermission):
    """
    Handles permissions for rings.  The basic rules are

     - owner may GET, PUT, POST, DELETE
     - nobody else can access
     """

    def has_object_permission(self, request, view, obj):
        return True


class ChainPermissions(permissions.BasePermission):
    """
    Handles permissions for chains.  The basic rules are

     - owner may GET, PUT, POST, DELETE
     - nobody else can access
     """

    def has_object_permission(self, request, view, obj):
        return True


class ChainSetPermissions(permissions.BasePermission):
    """
    Handles permissions for chains.  The basic rules are

     - owner may GET, PUT, POST, DELETE
     - nobody else can access
     """

    def has_object_permission(self, request, view, obj):
        return True


class NodePermissions(permissions.BasePermission):
    """
        Handles permissions for chains.  The basic rules are

         - owner may GET, PUT, POST, DELETE
         - nobody else can access
         """

    def has_object_permission(self, request, view, obj):
        return True


class NodeBundlePermissions(permissions.BasePermission):
    """
        Handles permissions for chains.  The basic rules are

         - owner may GET, PUT, POST, DELETE
         - nobody else can access
         """


    def has_object_permission(self, request, view, obj):
        return True
