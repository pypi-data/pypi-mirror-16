Monitoring
----------
{% load djangofloor %}

Nagios or Shinken
~~~~~~~~~~~~~~~~~

You can use Nagios checks to monitor several points:

  * connection to the application server (gunicorn or uwsgi):
  * connection to the database servers (PostgreSQL{% if USE_CELERY %} and Redis{% endif %}),
  * connection to the reverse-proxy server (apache or nginx),
  * the validity of the SSL certificate (can be combined with the previous check),
  * creation date of the last backup (database and files),
  * living processes for gunicorn{% if USE_CELERY %}, celery, redis{% endif %}, postgresql, apache,
  * standard checks for RAM, disk, swap…

Here is a sample NRPE configuration file:

.. code-block:: bash

  cat << EOF | sudo tee /etc/nagios/nrpe.d/{{ PROJECT_NAME }}.cfg
  command[{{ PROJECT_NAME }}_wsgi]=/usr/lib/nagios/plugins/check_http -H {{ BIND_ADDRESS|df_urlparse:"hostname" }} -p {{ BIND_ADDRESS|df_urlparse:"port" }}
  {% if USE_CELERY %}command[{{ PROJECT_NAME }}_redis]=/usr/lib/nagios/plugins/check_tcp -H {{ REDIS_HOST }} -p {{ REDIS_PORT }}
  {% endif %}{% if DATABASE_ENGINE == 'django.db.backends.postgresql_psycopg2' %}command[{{ PROJECT_NAME }}_database]=/usr/lib/nagios/plugins/check_tcp -H {{ DATABASE_HOST }} -p {{ DATABASE_PORT|default:"5432" }}
  {% elif DATABASE_ENGINE == 'django.db.backends.mysql' %}command[{{ PROJECT_NAME }}_database]=/usr/lib/nagios/plugins/check_tcp -H {{ DATABASE_HOST }} -p {{ DATABASE_PORT|default:"3306" }}
  {% elif DATABASE_ENGINE == 'django.db.backends.oracle' %}command[{{ PROJECT_NAME }}_database]=/usr/lib/nagios/plugins/check_tcp -H {{ DATABASE_HOST }} -p {{ DATABASE_PORT|default:"1521" }}
  {% endif %}command[{{ PROJECT_NAME }}_reverse_proxy]=/usr/lib/nagios/plugins/check_http -H {{ SERVER_NAME }} -p {% if PROTOCOL == 'https' %}443{% else %}80{% endif %}{% if PROTOCOL == 'https' %} -S{% endif %}{% if FLOOR_AUTHENTICATION_HEADER %} -e 401{% endif %}
  command[{{ PROJECT_NAME }}_backup_db]=/usr/lib/nagios/plugins/check_file_age -w 172800 -c 432000 /var/backups/{{ PROJECT_NAME }}/backup_db.sql.gz
  command[{{ PROJECT_NAME }}_backup_media]=/usr/lib/nagios/plugins/check_file_age -w 3024000 -c 6048000 /var/backups/{{ PROJECT_NAME }}/backup_media.sql.gz
  command[{{ PROJECT_NAME }}_gunicorn]=/usr/lib/nagios/plugins/check_procs -C python -a '{{ DF_PATH_BIN }}/{{ PROJECT_NAME }}-gunicorn'
  {% if USE_CELERY %}command[{{ PROJECT_NAME }}_celery]=/usr/lib/nagios/plugins/check_procs -C python -a '{{ DF_PATH_BIN }}/{{ PROJECT_NAME }}-celery worker'
  {% endif %}EOF
{% block sentry %}
Sentry
~~~~~~

For using Sentry to log errors, you must add `raven.contrib.django.raven_compat` to the installed apps.

.. code-block:: ini

  [global]
  extra_apps = raven.contrib.django.raven_compat
  [sentry]
  dsn_url = https://[key]:[secret]@app.getsentry.com/[project]

Of course, the Sentry client (Raven) must be separately installed, before testing the installation:

.. code-block:: bash

  sudo -u {{ PROJECT_NAME }} -i
  {{ PROJECT_NAME }}-manage raven test


{% endblock %}