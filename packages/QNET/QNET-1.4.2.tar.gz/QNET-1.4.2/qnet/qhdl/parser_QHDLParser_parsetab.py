
# parser_QHDLParser_parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '90FBA81425ACFB306883CDD9EB072AEE'
    
_lr_action_items = {'SIGNAL':([29,31,48,49,50,69,117,138,],[47,-53,-52,-56,47,-55,-57,-54,]),'OUT':([65,108,],[81,81,]),'COMMA':([23,26,42,57,68,84,95,96,97,98,99,100,116,139,141,142,143,144,145,146,147,148,155,156,158,160,161,],[34,-20,34,-19,34,34,-29,-26,-28,-27,-30,-31,126,-32,-68,-64,-65,-66,151,153,-70,-72,-67,-65,-63,-69,-71,]),'ENTITY':([0,1,2,4,5,8,27,78,135,],[3,-2,-4,-3,3,-1,38,-5,-48,]),'MAP':([123,131,],[132,136,]),'GENERIC':([10,52,114,],[12,12,123,]),'BEGIN':([30,49,50,69,117,],[51,-56,-49,-55,-57,]),'FIELDMODE':([80,81,82,83,87,],[105,-45,-44,105,105,]),'RPAREN':([24,25,35,36,37,41,43,44,45,46,53,54,55,56,58,63,64,74,76,85,86,95,96,97,98,99,100,102,104,105,106,107,134,139,141,142,143,144,145,146,147,148,155,156,158,160,161,],[-17,-14,-10,59,-11,-14,-37,-36,-41,-39,-21,-14,-22,-23,-16,-10,79,-18,-25,-40,-38,-29,-26,-28,-27,-30,-31,-24,-47,-46,-43,-42,139,-32,-68,-64,-65,-66,150,152,-70,-72,-67,-65,-63,-69,-71,]),'LOSSY_FIELDMODE':([80,81,82,83,87,],[104,-45,-44,104,104,]),'ASSIGN':([53,54,55,56,],[-21,75,-22,-23,]),'OF':([9,],[11,]),'FEEDLEFT':([88,111,],[110,110,]),'LPAREN':([12,21,75,132,136,137,149,151,],[17,28,101,137,140,101,101,101,]),'ARCHITECTURE':([0,1,2,4,5,8,78,112,135,],[6,-2,-4,-3,6,-1,-5,119,-48,]),'REAL':([33,],[53,]),'COMPONENT':([22,29,31,48,115,138,],[32,32,-53,-52,125,-54,]),'ICONST':([75,101,126,137,149,151,],[99,99,99,99,99,99,]),'IS':([7,16,],[10,22,]),'FCONST':([75,101,126,137,149,151,],[100,100,100,100,100,100,]),'COLON':([23,26,42,57,68,71,84,88,],[33,-20,65,-19,87,93,108,93,]),'ID':([3,6,11,17,27,28,32,34,35,38,39,40,47,51,66,67,70,72,89,90,91,92,93,110,112,113,114,119,120,121,122,124,125,127,129,130,137,140,149,151,153,154,157,159,],[7,9,16,26,-14,26,52,57,26,-6,-7,61,26,71,26,26,88,-59,-78,-58,111,-76,114,118,-14,-75,-14,-50,-51,61,-14,-62,61,-77,-60,-74,143,148,156,143,148,161,-61,-73,]),'FEEDRIGHT':([143,148,],[149,154,]),'INT':([33,],[56,]),'IN':([65,108,],[82,82,]),'INOUT':([65,],[80,]),'END':([10,13,14,15,18,19,20,52,70,72,73,77,89,90,91,92,94,103,113,114,122,124,127,129,130,157,159,],[-14,-12,-13,-14,-33,-34,27,-14,-14,-59,-14,-15,-78,-58,112,-76,115,-35,-75,-14,-14,-62,-77,-60,-74,-61,-73,]),'SEMI':([24,25,27,38,39,40,41,43,44,45,46,53,54,55,56,58,59,60,61,62,74,76,79,85,86,95,96,97,98,99,100,102,104,105,106,107,109,112,118,119,120,121,125,128,133,139,150,152,],[-17,35,-14,-6,-7,-14,63,-37,-36,66,67,-21,-14,-22,-23,-16,77,-9,-8,78,-18,-25,103,-40,-38,-29,-26,-28,-27,-30,-31,-24,-47,-46,-43,-42,117,-14,127,-50,-51,-14,-14,135,138,-32,157,159,]),'$end':([1,2,4,5,8,78,135,],[-2,-4,-3,0,-1,-5,-48,]),'COMPLEX':([33,],[55,]),'PORT':([10,13,14,15,52,73,77,114,122,124,157,],[-14,-12,-13,21,-14,21,-15,-14,131,-62,-61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'complex':([75,137,149,151,],[98,98,98,98,]),'feedright_port_assignment':([140,153,],[147,160,]),'feedright_generic_assignment':([137,151,],[142,158,]),'architecture_head':([22,],[30,]),'signal_list':([29,],[50,]),'id_list':([17,28,35,47,66,67,],[23,42,23,68,84,84,]),'instance_mapping_assignment_list':([51,],[70,]),'opt_entity':([27,],[40,]),'simple_number':([75,101,126,137,149,151,],[96,116,134,96,96,96,]),'architecture_declaration':([0,5,],[2,2,]),'id_or_value':([137,149,151,],[141,155,141,]),'opt_id':([40,121,125,],[62,128,133,]),'empty':([10,15,25,27,40,41,52,54,70,73,91,112,114,121,122,125,],[14,19,37,39,60,37,14,76,89,19,89,120,124,60,130,60,]),'generic_list':([17,],[25,]),'generic_type':([33,],[54,]),'feedleft_assignment':([70,91,],[92,113,]),'generic_statement':([10,52,],[13,13,]),'instance_mapping_assignment':([51,70,],[72,90,]),'signal_type':([80,83,87,],[106,107,109,]),'port_clause':([15,73,],[20,94,]),'generic_clause':([10,52,],[15,73,]),'port_list':([28,],[41,]),'entity_declaration':([0,5,],[4,4,]),'component_declaration':([22,29,],[31,48,]),'with_io_port_list':([28,],[44,]),'number':([75,137,149,151,],[102,144,144,144,]),'non_io_port_entry_group':([28,66,67,],[45,45,45,]),'top_level_unit':([0,5,],[1,8,]),'generic_default':([54,],[74,]),'top_level_list':([0,],[5,]),'feedleft_assignment_list':([70,],[91,]),'opt_arch':([112,],[121,]),'signal_direction':([65,108,],[83,83,]),'generic_entry_group':([17,35,],[24,58,]),'non_io_port_list':([28,66,67,],[43,85,86,]),'port_map':([122,],[129,]),'port_statement':([15,73,],[18,18,]),'opt_semi':([25,41,],[36,64,]),'component_declaration_list':([22,],[29,]),'feedright_port_assignment_list':([140,],[146,]),'io_port_entry_group':([28,],[46,]),'int':([75,101,126,137,149,151,],[97,97,97,97,97,97,]),'real':([75,101,126,137,149,151,],[95,95,95,95,95,95,]),'generic_map':([114,],[122,]),'feedright_generic_assignment_list':([137,],[145,]),'signal_entry_group':([29,50,],[49,69,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> top_level_list","S'",1,None,None,None),
  ('top_level_list -> top_level_list top_level_unit','top_level_list',2,'p_top_level_list','qhdl_parser.py',132),
  ('top_level_list -> top_level_unit','top_level_list',1,'p_top_level_list','qhdl_parser.py',133),
  ('top_level_unit -> entity_declaration','top_level_unit',1,'p_top_level_unit','qhdl_parser.py',160),
  ('top_level_unit -> architecture_declaration','top_level_unit',1,'p_top_level_unit','qhdl_parser.py',161),
  ('entity_declaration -> ENTITY ID IS generic_clause port_clause END opt_entity opt_id SEMI','entity_declaration',9,'p_entity_declaration','qhdl_parser.py',167),
  ('opt_entity -> ENTITY','opt_entity',1,'p_opt_entity','qhdl_parser.py',180),
  ('opt_entity -> empty','opt_entity',1,'p_opt_entity','qhdl_parser.py',181),
  ('opt_id -> ID','opt_id',1,'p_opt_id','qhdl_parser.py',187),
  ('opt_id -> empty','opt_id',1,'p_opt_id','qhdl_parser.py',188),
  ('opt_semi -> SEMI','opt_semi',1,'p_opt_semi','qhdl_parser.py',194),
  ('opt_semi -> empty','opt_semi',1,'p_opt_semi','qhdl_parser.py',195),
  ('generic_clause -> generic_statement','generic_clause',1,'p_generic_clause','qhdl_parser.py',201),
  ('generic_clause -> empty','generic_clause',1,'p_generic_clause','qhdl_parser.py',202),
  ('empty -> <empty>','empty',0,'p_empty','qhdl_parser.py',210),
  ('generic_statement -> GENERIC LPAREN generic_list opt_semi RPAREN SEMI','generic_statement',6,'p_generic_statement','qhdl_parser.py',217),
  ('generic_list -> generic_list SEMI generic_entry_group','generic_list',3,'p_generic_list','qhdl_parser.py',223),
  ('generic_list -> generic_entry_group','generic_list',1,'p_generic_list','qhdl_parser.py',224),
  ('generic_entry_group -> id_list COLON generic_type generic_default','generic_entry_group',4,'p_generic_entry_group','qhdl_parser.py',233),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','qhdl_parser.py',240),
  ('id_list -> ID','id_list',1,'p_id_list','qhdl_parser.py',241),
  ('generic_type -> REAL','generic_type',1,'p_generic_type','qhdl_parser.py',250),
  ('generic_type -> COMPLEX','generic_type',1,'p_generic_type','qhdl_parser.py',251),
  ('generic_type -> INT','generic_type',1,'p_generic_type','qhdl_parser.py',252),
  ('generic_default -> ASSIGN number','generic_default',2,'p_generic_default','qhdl_parser.py',257),
  ('generic_default -> empty','generic_default',1,'p_generic_default','qhdl_parser.py',258),
  ('number -> simple_number','number',1,'p_number','qhdl_parser.py',267),
  ('number -> complex','number',1,'p_number','qhdl_parser.py',268),
  ('simple_number -> int','simple_number',1,'p_simple_number','qhdl_parser.py',274),
  ('simple_number -> real','simple_number',1,'p_simple_number','qhdl_parser.py',275),
  ('int -> ICONST','int',1,'p_int','qhdl_parser.py',281),
  ('real -> FCONST','real',1,'p_real','qhdl_parser.py',287),
  ('complex -> LPAREN simple_number COMMA simple_number RPAREN','complex',5,'p_complex','qhdl_parser.py',294),
  ('port_clause -> port_statement','port_clause',1,'p_port_clause','qhdl_parser.py',300),
  ('port_clause -> empty','port_clause',1,'p_port_clause','qhdl_parser.py',301),
  ('port_statement -> PORT LPAREN port_list opt_semi RPAREN SEMI','port_statement',6,'p_port_statement','qhdl_parser.py',311),
  ('port_list -> with_io_port_list','port_list',1,'p_port_list','qhdl_parser.py',317),
  ('port_list -> non_io_port_list','port_list',1,'p_port_list','qhdl_parser.py',318),
  ('with_io_port_list -> io_port_entry_group SEMI non_io_port_list','with_io_port_list',3,'p_with_io_port_list','qhdl_parser.py',328),
  ('with_io_port_list -> io_port_entry_group','with_io_port_list',1,'p_with_io_port_list','qhdl_parser.py',329),
  ('non_io_port_list -> non_io_port_entry_group SEMI non_io_port_list','non_io_port_list',3,'p_non_io_port_list','qhdl_parser.py',338),
  ('non_io_port_list -> non_io_port_entry_group','non_io_port_list',1,'p_non_io_port_list','qhdl_parser.py',339),
  ('non_io_port_entry_group -> id_list COLON signal_direction signal_type','non_io_port_entry_group',4,'p_non_io_port_entry_group','qhdl_parser.py',349),
  ('io_port_entry_group -> id_list COLON INOUT signal_type','io_port_entry_group',4,'p_io_port_entry_group','qhdl_parser.py',355),
  ('signal_direction -> IN','signal_direction',1,'p_signal_direction','qhdl_parser.py',362),
  ('signal_direction -> OUT','signal_direction',1,'p_signal_direction','qhdl_parser.py',363),
  ('signal_type -> FIELDMODE','signal_type',1,'p_signal_type','qhdl_parser.py',369),
  ('signal_type -> LOSSY_FIELDMODE','signal_type',1,'p_signal_type','qhdl_parser.py',370),
  ('architecture_declaration -> ARCHITECTURE ID OF ID IS architecture_head BEGIN instance_mapping_assignment_list feedleft_assignment_list END opt_arch opt_id SEMI','architecture_declaration',13,'p_architecture_declaration','qhdl_parser.py',376),
  ('architecture_head -> component_declaration_list signal_list','architecture_head',2,'p_architecture_head','qhdl_parser.py',392),
  ('opt_arch -> ARCHITECTURE','opt_arch',1,'p_opt_arch','qhdl_parser.py',398),
  ('opt_arch -> empty','opt_arch',1,'p_opt_arch','qhdl_parser.py',399),
  ('component_declaration_list -> component_declaration_list component_declaration','component_declaration_list',2,'p_component_declaration_list','qhdl_parser.py',406),
  ('component_declaration_list -> component_declaration','component_declaration_list',1,'p_component_declaration_list','qhdl_parser.py',407),
  ('component_declaration -> COMPONENT ID generic_clause port_clause END COMPONENT opt_id SEMI','component_declaration',8,'p_component_declaration','qhdl_parser.py',417),
  ('signal_list -> signal_list signal_entry_group','signal_list',2,'p_signal_list','qhdl_parser.py',426),
  ('signal_list -> signal_entry_group','signal_list',1,'p_signal_list','qhdl_parser.py',427),
  ('signal_entry_group -> SIGNAL id_list COLON signal_type SEMI','signal_entry_group',5,'p_signal_entry_group','qhdl_parser.py',437),
  ('instance_mapping_assignment_list -> instance_mapping_assignment_list instance_mapping_assignment','instance_mapping_assignment_list',2,'p_instance_mapping_assignment_list','qhdl_parser.py',446),
  ('instance_mapping_assignment_list -> instance_mapping_assignment','instance_mapping_assignment_list',1,'p_instance_mapping_assignment_list','qhdl_parser.py',447),
  ('instance_mapping_assignment -> ID COLON ID generic_map port_map','instance_mapping_assignment',5,'p_instance_mapping_assignment','qhdl_parser.py',456),
  ('generic_map -> GENERIC MAP LPAREN feedright_generic_assignment_list RPAREN SEMI','generic_map',6,'p_generic_map','qhdl_parser.py',462),
  ('generic_map -> empty','generic_map',1,'p_generic_map','qhdl_parser.py',463),
  ('feedright_generic_assignment_list -> feedright_generic_assignment_list COMMA feedright_generic_assignment','feedright_generic_assignment_list',3,'p_feedright_generic_assignment_list','qhdl_parser.py',472),
  ('feedright_generic_assignment_list -> feedright_generic_assignment','feedright_generic_assignment_list',1,'p_feedright_generic_assignment_list','qhdl_parser.py',473),
  ('id_or_value -> ID','id_or_value',1,'p_id_or_value','qhdl_parser.py',498),
  ('id_or_value -> number','id_or_value',1,'p_id_or_value','qhdl_parser.py',499),
  ('feedright_generic_assignment -> ID FEEDRIGHT id_or_value','feedright_generic_assignment',3,'p_feedright_generic_assignment','qhdl_parser.py',505),
  ('feedright_generic_assignment -> id_or_value','feedright_generic_assignment',1,'p_feedright_generic_assignment','qhdl_parser.py',506),
  ('feedright_port_assignment_list -> feedright_port_assignment_list COMMA feedright_port_assignment','feedright_port_assignment_list',3,'p_feedright_port_assignment_list','qhdl_parser.py',515),
  ('feedright_port_assignment_list -> feedright_port_assignment','feedright_port_assignment_list',1,'p_feedright_port_assignment_list','qhdl_parser.py',516),
  ('feedright_port_assignment -> ID FEEDRIGHT ID','feedright_port_assignment',3,'p_feedright_port_assignment','qhdl_parser.py',541),
  ('feedright_port_assignment -> ID','feedright_port_assignment',1,'p_feedright_port_assignment','qhdl_parser.py',542),
  ('port_map -> PORT MAP LPAREN feedright_port_assignment_list RPAREN SEMI','port_map',6,'p_port_map','qhdl_parser.py',551),
  ('port_map -> empty','port_map',1,'p_port_map','qhdl_parser.py',552),
  ('feedleft_assignment_list -> feedleft_assignment_list feedleft_assignment','feedleft_assignment_list',2,'p_feedleft_assignment_list','qhdl_parser.py',561),
  ('feedleft_assignment_list -> feedleft_assignment','feedleft_assignment_list',1,'p_feedleft_assignment_list','qhdl_parser.py',562),
  ('feedleft_assignment -> ID FEEDLEFT ID SEMI','feedleft_assignment',4,'p_feedleft_assignment','qhdl_parser.py',575),
  ('feedleft_assignment -> empty','feedleft_assignment',1,'p_feedleft_assignment','qhdl_parser.py',576),
]
