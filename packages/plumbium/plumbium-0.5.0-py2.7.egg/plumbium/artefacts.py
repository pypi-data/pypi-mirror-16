"""
plumbium.artefacts
**********************

Module containing the plumbium.artefacts.Artefact base class and classes
inheriting from it.
"""

from __future__ import absolute_import
import os.path
from .utils import file_sha1sum


class Artefact(object):
    """
    Base class for Plumbium artefacts (files consumed by and generated by processes)

    :param filename: The filename of the artefact
    :type filename: str
    :param extension: The extension of the artefact's filename
    :type extension: str
    :raises: :class:`exceptions.ValueError`
    """

    def __init__(self, filename, extension):
        if not filename.endswith(extension):
            raise ValueError('Extension is not {0!r}'.format(extension))
        self._filename = filename
        self._ext_length = len(extension)
        self._abspath = os.path.abspath(filename)

    def checksum(self):
        """Calculate the SHA-1 checksum of the file"""

        return file_sha1sum(self.filename)

    def exists(self):
        """Return True if Artefact.filename exists"""

        return os.path.exists(self.filename)

    @property
    def abspath(self):
        """The file's absolute path"""

        return self._abspath

    @property
    def basename(self):
        """The filename without the extension and directory components

        .. code:: python

            >> Artefact('/dir/file.txt').basename()
            'file'
        """

        return os.path.basename(self._filename)[:-self._ext_length]

    @property
    def dirname(self):
        """Return the directory component of the filename

        .. code:: python

            >> Artefact('/dir/file.txt').dirname()
            '/dir'
        """

        return os.path.dirname(self._filename)

    def dereference(self):
        self._filename = os.path.basename(self._filename)

    @property
    def filename(self):
        return self._filename

    def __repr__(self):
        return '{0}({1!r})'.format(self.__class__.__name__, self.filename)


class NiiGzImage(Artefact):
    """An artefact for .nii.gz images

    :param filename: The filename of the artefact
    :type filename: str
    """

    def __init__(self, filename):
        super(NiiGzImage, self).__init__(filename, '.nii.gz')

    def __repr__(self):
        return '{0}({1!r})'.format(self.__class__.__name__, self.filename)


class TextFile(Artefact):
    """An artefact for .txt files

    :param filename: The filename of the artefact
    :type filename: str
    """

    def __init__(self, filename):
        super(TextFile, self).__init__(filename, '.txt')

    def __repr__(self):
        return '{0}({1!r})'.format(self.__class__.__name__, self.filename)
