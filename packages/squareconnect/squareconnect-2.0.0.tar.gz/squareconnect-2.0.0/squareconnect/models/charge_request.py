# coding: utf-8

"""
Copyright 2016 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class ChargeRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, idempotency_key=None, amount_money=None, card_nonce=None, customer_card_id=None, delay_capture=None, reference_id=None, note=None, customer_id=None, billing_address=None, shipping_address=None):
        """
        ChargeRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'idempotency_key': 'str',
            'amount_money': 'Money',
            'card_nonce': 'str',
            'customer_card_id': 'str',
            'delay_capture': 'bool',
            'reference_id': 'str',
            'note': 'str',
            'customer_id': 'str',
            'billing_address': 'Address',
            'shipping_address': 'Address'
        }

        self.attribute_map = {
            'idempotency_key': 'idempotency_key',
            'amount_money': 'amount_money',
            'card_nonce': 'card_nonce',
            'customer_card_id': 'customer_card_id',
            'delay_capture': 'delay_capture',
            'reference_id': 'reference_id',
            'note': 'note',
            'customer_id': 'customer_id',
            'billing_address': 'billing_address',
            'shipping_address': 'shipping_address'
        }

        self._idempotency_key = idempotency_key
        self._amount_money = amount_money
        self._card_nonce = card_nonce
        self._customer_card_id = customer_card_id
        self._delay_capture = delay_capture
        self._reference_id = reference_id
        self._note = note
        self._customer_id = customer_id
        self._billing_address = billing_address
        self._shipping_address = shipping_address

    @property
    def idempotency_key(self):
        """
        Gets the idempotency_key of this ChargeRequest.
        A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer. Note that *all other fields* must also remain identical in your followup request, or an error will occur.

        :return: The idempotency_key of this ChargeRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """
        Sets the idempotency_key of this ChargeRequest.
        A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer. Note that *all other fields* must also remain identical in your followup request, or an error will occur.

        :param idempotency_key: The idempotency_key of this ChargeRequest.
        :type: str
        """

        self._idempotency_key = idempotency_key

    @property
    def amount_money(self):
        """
        Gets the amount_money of this ChargeRequest.
        The amount of money to collect in the transaction.

        :return: The amount_money of this ChargeRequest.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """
        Sets the amount_money of this ChargeRequest.
        The amount of money to collect in the transaction.

        :param amount_money: The amount_money of this ChargeRequest.
        :type: Money
        """

        self._amount_money = amount_money

    @property
    def card_nonce(self):
        """
        Gets the card_nonce of this ChargeRequest.
        A nonce representing the credit card to charge for this transaction. Do not provide a value for this field if you provide a value for `customer_card_id`.

        :return: The card_nonce of this ChargeRequest.
        :rtype: str
        """
        return self._card_nonce

    @card_nonce.setter
    def card_nonce(self, card_nonce):
        """
        Sets the card_nonce of this ChargeRequest.
        A nonce representing the credit card to charge for this transaction. Do not provide a value for this field if you provide a value for `customer_card_id`.

        :param card_nonce: The card_nonce of this ChargeRequest.
        :type: str
        """

        self._card_nonce = card_nonce

    @property
    def customer_card_id(self):
        """
        Gets the customer_card_id of this ChargeRequest.
        The ID of the customer card on file to charge for this transaction. Do not provide a value for this field if you provide a value for `card_nonce`.

        :return: The customer_card_id of this ChargeRequest.
        :rtype: str
        """
        return self._customer_card_id

    @customer_card_id.setter
    def customer_card_id(self, customer_card_id):
        """
        Sets the customer_card_id of this ChargeRequest.
        The ID of the customer card on file to charge for this transaction. Do not provide a value for this field if you provide a value for `card_nonce`.

        :param customer_card_id: The customer_card_id of this ChargeRequest.
        :type: str
        """

        self._customer_card_id = customer_card_id

    @property
    def delay_capture(self):
        """
        Gets the delay_capture of this ChargeRequest.
        If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the *CaptureTransaction** endpoint) or a Void (with the **VoidTransation** endpoint.

        :return: The delay_capture of this ChargeRequest.
        :rtype: bool
        """
        return self._delay_capture

    @delay_capture.setter
    def delay_capture(self, delay_capture):
        """
        Sets the delay_capture of this ChargeRequest.
        If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the *CaptureTransaction** endpoint) or a Void (with the **VoidTransation** endpoint.

        :param delay_capture: The delay_capture of this ChargeRequest.
        :type: bool
        """

        self._delay_capture = delay_capture

    @property
    def reference_id(self):
        """
        Gets the reference_id of this ChargeRequest.
        An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).

        :return: The reference_id of this ChargeRequest.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """
        Sets the reference_id of this ChargeRequest.
        An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).

        :param reference_id: The reference_id of this ChargeRequest.
        :type: str
        """

        self._reference_id = reference_id

    @property
    def note(self):
        """
        Gets the note of this ChargeRequest.
        An optional note to associate with the transaction.

        :return: The note of this ChargeRequest.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this ChargeRequest.
        An optional note to associate with the transaction.

        :param note: The note of this ChargeRequest.
        :type: str
        """

        self._note = note

    @property
    def customer_id(self):
        """
        Gets the customer_id of this ChargeRequest.
        The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.

        :return: The customer_id of this ChargeRequest.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this ChargeRequest.
        The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.

        :param customer_id: The customer_id of this ChargeRequest.
        :type: str
        """

        self._customer_id = customer_id

    @property
    def billing_address(self):
        """
        Gets the billing_address of this ChargeRequest.
        If available, Postal code in the billing address for US and Canada payments may reduce decline rate.

        :return: The billing_address of this ChargeRequest.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """
        Sets the billing_address of this ChargeRequest.
        If available, Postal code in the billing address for US and Canada payments may reduce decline rate.

        :param billing_address: The billing_address of this ChargeRequest.
        :type: Address
        """

        self._billing_address = billing_address

    @property
    def shipping_address(self):
        """
        Gets the shipping_address of this ChargeRequest.
        

        :return: The shipping_address of this ChargeRequest.
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """
        Sets the shipping_address of this ChargeRequest.
        

        :param shipping_address: The shipping_address of this ChargeRequest.
        :type: Address
        """

        self._shipping_address = shipping_address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
