#!/usr/bin/env python
"""Larch server -- this will make sure a larch server is
running on the desired port.

Usage:  larch_server [OPTIONS] [start|stop|restart|status]

with options
  -p PORT, --port=PORT  port number for remote server [4966]
"""

__version__ = 'version 1'

import os
import sys
import subprocess
import time
import json

from optparse import OptionParser
from xmlrpclib import ServerProxy
from distutils.spawn import find_executable

from larch.xmlrpc_server import LarchServer

def start_server(port=4966, host='localhost',
                 local_echo=False, with_wx=True, quiet=False):
    "start server"
    thispath, thisfile = os.path.split(os.path.abspath(__file__))
    exe = os.path.join(thispath, 'larch')
    args = [exe, '-r', '-p', '%d' % port]
    if quiet:                   # insert -q flag
        args[2:2] = ['-q']
    if os.name == 'nt':         # prepend fully resolved python executable
        args[:0] = [find_executable('python')]
    return subprocess.Popen(args)


def stop_server(port=4966, host='localhost'):
    "stop server"
    s = ServerProxy('http://%s:%i' % (host, port))
    s.keep_alive = False
    s.exit()

def get_server(port=4966, host='localhost'):
    "returns server at a port"
    return ServerProxy('http://%s:%d' % (host, port))


def test_server(port=4966):
    "is a valid Larch server running on this port?"
    server = get_server(port=port)
    methods = []
    try:
        methods = server.system.listMethods()
    except:
        return False
    if len(methods) < 5 or 'larch' not in methods:
        return False
    ret = ''
    try:
        server.larch('print _sys.config.user_larchdir')
        ret = server.get_messages()
    except:
        return False
    if len(ret) < 1:
        return False
    return True

usage = "usage: %prog [options] [start|stop|restart|status]"

parser = OptionParser(usage=usage, prog="larch_server",
                      version="larch rpc server: %s" % __version__)

parser.add_option("-p", "--port", dest="port", default='4966',
                  metavar='PORT', help="port number for server")
parser.add_option("-q", "--quiet", action="store_true", dest="quiet", default=False,
                  help="suppress screen messages from this launcher script")

(options, args) = parser.parse_args()

if len(args) == 0:
    args = ['status']

command = args[0]
port = int(options.port)

if command == 'start':
    if test_server(port=port):
        if not options.quiet: print 'Yes: Larch server on port %d running' % port
    else:
        start_server(port=port, quiet=options.quiet)

elif command == 'stop':
    if test_server(port=port):
        stop_server(port=port)
    else:
        if not options.quiet: print 'No: Larch server on port %d not running' % port

elif command == 'restart':
    if test_server(port=port):
        stop_server(port=port)
    time.sleep(0.5)
    start_server(port=port, quiet=options.quiet)

elif command == 'status':
    if test_server(port=port):
        if not options.quiet: print 'Yes: Larch server on port %d running' % port
        sys.exit(0)
    else:
        if not options.quiet: print 'No: Larch server on port %d not running' % port
        sys.exit(1)
